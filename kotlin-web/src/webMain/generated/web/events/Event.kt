// Automatically generated - do not modify!

package web.events

import js.array.ReadonlyArray
import js.reflect.unsafeCast
import web.time.DOMHighResTimeStamp
import kotlin.js.definedExternally

/**
 * The **`Event`** interface represents an event which takes place on an `EventTarget`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event)
 */
open external class Event(
    open val type: EventType<Event>,
    init: EventInit = definedExternally,
) {
    /**
     * The **`bubbles`** read-only property of the Event interface indicates whether the event bubbles up through the DOM tree or not.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/bubbles)
     */
    val bubbles: Boolean

    /**
     * The **`cancelable`** read-only property of the Event interface indicates whether the event can be canceled, and therefore prevented as if the event never happened.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelable)
     */
    val cancelable: Boolean

    /**
     * The read-only **`composed`** property of the Event interface returns a boolean value which indicates whether or not the event will propagate across the shadow DOM boundary into the standard DOM.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composed)
     */
    val composed: Boolean

    /**
     * The **`currentTarget`** read-only property of the Event interface identifies the element to which the event handler has been attached.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)
     */
    val currentTarget: EventTarget?

    /**
     * The **`defaultPrevented`** read-only property of the Event interface returns a boolean value indicating whether or not the call to Event.preventDefault() canceled the event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)
     */
    val defaultPrevented: Boolean

    /**
     * The **`eventPhase`** read-only property of the Event interface indicates which phase of the event flow is currently being evaluated.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)
     */
    val eventPhase: EventPhase

    /**
     * The **`isTrusted`** read-only property of the Event interface is a boolean value that is `true` when the event was generated by the user agent (including via user actions and programmatic methods such as HTMLElement.focus()), and `false` when the event was dispatched via EventTarget.dispatchEvent().
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)
     */
    val isTrusted: Boolean

    /**
     * The read-only **`target`** property of the Event interface is a reference to the object onto which the event was dispatched.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/target)
     */
    val target: EventTarget?

    /**
     * The **`timeStamp`** read-only property of the Event interface returns the time (in milliseconds) at which the event was created.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)
     */
    val timeStamp: DOMHighResTimeStamp
    /**
     * The **`type`** read-only property of the Event interface returns a string containing the event's type.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/type)
     */
    // val type: String
    /**
     * The **`composedPath()`** method of the Event interface returns the event's path which is an array of the objects on which listeners will be invoked.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composedPath)
     */
    fun composedPath(): ReadonlyArray<EventTarget>

    /**
     * The **`preventDefault()`** method of the Event interface tells the user agent that the event is being explicitly handled, so its default action, such as page scrolling, link navigation, or pasting text, should not be taken.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/preventDefault)
     */
    fun preventDefault()

    /**
     * The **`stopImmediatePropagation()`** method of the Event interface prevents other listeners of the same event from being called.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/stopImmediatePropagation)
     */
    fun stopImmediatePropagation()

    /**
     * The **`stopPropagation()`** method of the Event interface prevents further propagation of the current event in the capturing and bubbling phases.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/stopPropagation)
     */
    fun stopPropagation()
    val NONE: EventPhase
    val CAPTURING_PHASE: EventPhase
    val AT_TARGET: EventPhase
    val BUBBLING_PHASE: EventPhase

    companion object {
        val NONE: EventPhase
        val CAPTURING_PHASE: EventPhase
        val AT_TARGET: EventPhase
        val BUBBLING_PHASE: EventPhase
    }
}

inline fun Event.asInit(): EventInit =
    unsafeCast(this)

inline val Event.Companion.DOM_CONTENT_LOADED: EventType<Event>
    get() = EventType("DOMContentLoaded")

inline val Event.Companion.ABORT: EventType<Event>
    get() = EventType("abort")

inline val Event.Companion.ADD_SOURCE_BUFFER: EventType<Event>
    get() = EventType("addsourcebuffer")

inline val Event.Companion.AFTER_PRINT: EventType<Event>
    get() = EventType("afterprint")

inline val Event.Companion.BEFORE_MATCH: EventType<Event>
    get() = EventType("beforematch")

inline val Event.Companion.BEFORE_PRINT: EventType<Event>
    get() = EventType("beforeprint")

inline val Event.Companion.BUFFERED_AMOUNT_LOW: EventType<Event>
    get() = EventType("bufferedamountlow")

inline val Event.Companion.CANCEL: EventType<Event>
    get() = EventType("cancel")

inline val Event.Companion.CAN_PLAY: EventType<Event>
    get() = EventType("canplay")

inline val Event.Companion.CAN_PLAY_THROUGH: EventType<Event>
    get() = EventType("canplaythrough")

inline val Event.Companion.CHANGE: EventType<Event>
    get() = EventType("change")

inline val Event.Companion.CLICK: EventType<Event>
    get() = EventType("click")

inline val Event.Companion.CLOSE: EventType<Event>
    get() = EventType("close")

inline val Event.Companion.CLOSING: EventType<Event>
    get() = EventType("closing")

inline val Event.Companion.COMPLETE: EventType<Event>
    get() = EventType("complete")

inline val Event.Companion.CONNECT: EventType<Event>
    get() = EventType("connect")

inline val Event.Companion.CONNECTING: EventType<Event>
    get() = EventType("connecting")

inline val Event.Companion.CONNECTION_STATE_CHANGE: EventType<Event>
    get() = EventType("connectionstatechange")

inline val Event.Companion.CONTEXT_LOST: EventType<Event>
    get() = EventType("contextlost")

inline val Event.Companion.CONTEXT_RESTORED: EventType<Event>
    get() = EventType("contextrestored")

inline val Event.Companion.CONTROLLER_CHANGE: EventType<Event>
    get() = EventType("controllerchange")

inline val Event.Companion.CUE_CHANGE: EventType<Event>
    get() = EventType("cuechange")

inline val Event.Companion.DEQUEUE: EventType<Event>
    get() = EventType("dequeue")

inline val Event.Companion.DEVICE_CHANGE: EventType<Event>
    get() = EventType("devicechange")

inline val Event.Companion.DISCONNECT: EventType<Event>
    get() = EventType("disconnect")

inline val Event.Companion.DISPOSE: EventType<Event>
    get() = EventType("dispose")

inline val Event.Companion.DURATION_CHANGE: EventType<Event>
    get() = EventType("durationchange")

inline val Event.Companion.EMPTIED: EventType<Event>
    get() = EventType("emptied")

inline val Event.Companion.ENDED: EventType<Event>
    get() = EventType("ended")

inline val Event.Companion.ENTER: EventType<Event>
    get() = EventType("enter")

inline val Event.Companion.ERROR: EventType<Event>
    get() = EventType("error")

inline val Event.Companion.EXIT: EventType<Event>
    get() = EventType("exit")

inline val Event.Companion.FULLSCREEN_CHANGE: EventType<Event>
    get() = EventType("fullscreenchange")

inline val Event.Companion.FULLSCREEN_ERROR: EventType<Event>
    get() = EventType("fullscreenerror")

inline val Event.Companion.GATHERING_STATE_CHANGE: EventType<Event>
    get() = EventType("gatheringstatechange")

inline val Event.Companion.ICE_CONNECTION_STATE_CHANGE: EventType<Event>
    get() = EventType("iceconnectionstatechange")

inline val Event.Companion.ICE_GATHERING_STATE_CHANGE: EventType<Event>
    get() = EventType("icegatheringstatechange")

inline val Event.Companion.INVALID: EventType<Event>
    get() = EventType("invalid")

inline val Event.Companion.KEY_STATUSES_CHANGE: EventType<Event>
    get() = EventType("keystatuseschange")

inline val Event.Companion.LANGUAGE_CHANGE: EventType<Event>
    get() = EventType("languagechange")

inline val Event.Companion.LOAD: EventType<Event>
    get() = EventType("load")

inline val Event.Companion.LOADED_DATA: EventType<Event>
    get() = EventType("loadeddata")

inline val Event.Companion.LOADED_METADATA: EventType<Event>
    get() = EventType("loadedmetadata")

inline val Event.Companion.LOAD_START: EventType<Event>
    get() = EventType("loadstart")

inline val Event.Companion.MUTE: EventType<Event>
    get() = EventType("mute")

inline val Event.Companion.NEGOTIATION_NEEDED: EventType<Event>
    get() = EventType("negotiationneeded")

inline val Event.Companion.OFFLINE: EventType<Event>
    get() = EventType("offline")

inline val Event.Companion.ONLINE: EventType<Event>
    get() = EventType("online")

inline val Event.Companion.OPEN: EventType<Event>
    get() = EventType("open")

inline val Event.Companion.PAUSE: EventType<Event>
    get() = EventType("pause")

inline val Event.Companion.PLAY: EventType<Event>
    get() = EventType("play")

inline val Event.Companion.PLAYING: EventType<Event>
    get() = EventType("playing")

inline val Event.Companion.POINTER_LOCK_CHANGE: EventType<Event>
    get() = EventType("pointerlockchange")

inline val Event.Companion.POINTER_LOCK_ERROR: EventType<Event>
    get() = EventType("pointerlockerror")

inline val Event.Companion.POINTER_RAW_UPDATE: EventType<Event>
    get() = EventType("pointerrawupdate")

inline val Event.Companion.PROGRESS: EventType<Event>
    get() = EventType("progress")

inline val Event.Companion.RATE_CHANGE: EventType<Event>
    get() = EventType("ratechange")

inline val Event.Companion.READY_STATE_CHANGE: EventType<Event>
    get() = EventType("readystatechange")

inline val Event.Companion.RELEASE: EventType<Event>
    get() = EventType("release")

inline val Event.Companion.REMOVE_SOURCE_BUFFER: EventType<Event>
    get() = EventType("removesourcebuffer")

inline val Event.Companion.RESET: EventType<Event>
    get() = EventType("reset")

inline val Event.Companion.RESIZE: EventType<Event>
    get() = EventType("resize")

inline val Event.Companion.RESOURCE_TIMING_BUFFER_FULL: EventType<Event>
    get() = EventType("resourcetimingbufferfull")

inline val Event.Companion.RESUME: EventType<Event>
    get() = EventType("resume")

inline val Event.Companion.SCROLL: EventType<Event>
    get() = EventType("scroll")

inline val Event.Companion.SCROLL_END: EventType<Event>
    get() = EventType("scrollend")

inline val Event.Companion.SEEKED: EventType<Event>
    get() = EventType("seeked")

inline val Event.Companion.SEEKING: EventType<Event>
    get() = EventType("seeking")

inline val Event.Companion.SELECT: EventType<Event>
    get() = EventType("select")

inline val Event.Companion.SELECTED_CANDIDATE_PAIR_CHANGE: EventType<Event>
    get() = EventType("selectedcandidatepairchange")

inline val Event.Companion.SELECTION_CHANGE: EventType<Event>
    get() = EventType("selectionchange")

inline val Event.Companion.SELECT_START: EventType<Event>
    get() = EventType("selectstart")

inline val Event.Companion.SHOW: EventType<Event>
    get() = EventType("show")

inline val Event.Companion.SIGNALING_STATE_CHANGE: EventType<Event>
    get() = EventType("signalingstatechange")

inline val Event.Companion.SLOT_CHANGE: EventType<Event>
    get() = EventType("slotchange")

inline val Event.Companion.SOURCE_CLOSE: EventType<Event>
    get() = EventType("sourceclose")

inline val Event.Companion.SOURCE_ENDED: EventType<Event>
    get() = EventType("sourceended")

inline val Event.Companion.SOURCE_OPEN: EventType<Event>
    get() = EventType("sourceopen")

inline val Event.Companion.STALLED: EventType<Event>
    get() = EventType("stalled")

inline val Event.Companion.START: EventType<Event>
    get() = EventType("start")

inline val Event.Companion.STATE_CHANGE: EventType<Event>
    get() = EventType("statechange")

inline val Event.Companion.STOP: EventType<Event>
    get() = EventType("stop")

inline val Event.Companion.SUCCESS: EventType<Event>
    get() = EventType("success")

inline val Event.Companion.SUSPEND: EventType<Event>
    get() = EventType("suspend")

inline val Event.Companion.TIME_UPDATE: EventType<Event>
    get() = EventType("timeupdate")

inline val Event.Companion.UNLOAD: EventType<Event>
    get() = EventType("unload")

inline val Event.Companion.UNMUTE: EventType<Event>
    get() = EventType("unmute")

inline val Event.Companion.UPDATE: EventType<Event>
    get() = EventType("update")

inline val Event.Companion.UPDATE_END: EventType<Event>
    get() = EventType("updateend")

inline val Event.Companion.UPDATE_FOUND: EventType<Event>
    get() = EventType("updatefound")

inline val Event.Companion.UPDATE_START: EventType<Event>
    get() = EventType("updatestart")

inline val Event.Companion.VISIBILITY_CHANGE: EventType<Event>
    get() = EventType("visibilitychange")

inline val Event.Companion.VOICES_CHANGED: EventType<Event>
    get() = EventType("voiceschanged")

inline val Event.Companion.VOLUME_CHANGE: EventType<Event>
    get() = EventType("volumechange")

inline val Event.Companion.WAITING: EventType<Event>
    get() = EventType("waiting")

inline val Event.Companion.WAITING_FOR_KEY: EventType<Event>
    get() = EventType("waitingforkey")

inline val Event.Companion.WEBKIT_ANIMATION_END: EventType<Event>
    get() = EventType("webkitanimationend")

inline val Event.Companion.WEBKIT_ANIMATION_ITERATION: EventType<Event>
    get() = EventType("webkitanimationiteration")

inline val Event.Companion.WEBKIT_ANIMATION_START: EventType<Event>
    get() = EventType("webkitanimationstart")

inline val Event.Companion.WEBKIT_FULLSCREEN_CHANGE: EventType<Event>
    get() = EventType("webkitfullscreenchange")

inline val Event.Companion.WEBKIT_TRANSITION_END: EventType<Event>
    get() = EventType("webkittransitionend")
