// Generated by Karakum - do not modify it manually!

package electron.core

import js.promise.Promise

@Suppress("INTERFACE_WITH_SUPERCLASS")
external interface PushNotifications : node.events.EventEmitter {
// Docs: https://electronjs.org/docs/api/push-notifications
    /**
     * Emitted when the app receives a remote notification while running. See:
     * https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc
     *
     * @platform darwin
     */

    /**
     * @platform darwin
     */

    /**
     * @platform darwin
     */

    /**
     * @platform darwin
     */

    /**
     * @platform darwin
     */

    /**
     * Registers the app with Apple Push Notification service (APNS) to receive Badge,
     * Sound, and Alert notifications. If registration is successful, the promise will
     * be resolved with the APNS device token. Otherwise, the promise will be rejected
     * with an error message. See:
     * https://developer.apple.com/documentation/appkit/nsapplication/1428476-registerforremotenotificationtyp?language=objc
     *
     * @platform darwin
     */
    fun registerForAPNSNotifications(): Promise<String>

    /**
     * Unregisters the app from notifications received from APNS.
     *
     * Apps unregistered through this method can always reregister.
     *
     * See:
     * https://developer.apple.com/documentation/appkit/nsapplication/1428747-unregisterforremotenotifications?language=objc
     *
     * @platform darwin
     */
    fun unregisterForAPNSNotifications()

    @web.events.JsEvent("received-apns-notification")
    val receivedApnsNotificationEvent:
            node.events.EventInstance<js.array.Tuple2<Event<*>, js.objects.ReadonlyRecord<String, Any?>>>
}
