// Generated by Karakum - do not modify it manually!

@file:JsModule("INTERNAL_ENTITY")

package electron.core

external class ServiceWorkerMain {
// Docs: https://electronjs.org/docs/api/service-worker-main
    /**
     * Whether the service worker has been destroyed.
     *
     * @experimental
     */
    fun isDestroyed(): Boolean

    /**
     * Send an asynchronous message to the service worker process via `channel`, along
     * with arguments. Arguments will be serialized with the Structured Clone
     * Algorithm, just like `postMessage`, so prototype chains will not be included.
     * Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw an
     * exception.
     *
     * The service worker process can handle the message by listening to `channel` with
     * the `ipcRenderer` module.
     *
     * @experimental
     */
    fun send(
        channel: String,
        vararg args: Any?,
    )

    /**
     * * `end` Function - Method to call when the task has ended. If never called, the
     * service won't terminate while otherwise idle.
     *
     * Initiate a task to keep the service worker alive until ended.
     *
     * @experimental
     */
    fun startTask(): StartTask

    /**
     * An `IpcMainServiceWorker` instance scoped to the service worker.
     *
     * @experimental
     */
    val ipc: IpcMainServiceWorker

    /**
     * A `string` representing the scope URL of the service worker.
     *
     * @experimental
     */
    val scope: String

    /**
     * A `string` representing the script URL of the service worker.
     *
     * @experimental
     */
    val scriptURL: String

    /**
     * A `number` representing the ID of the specific version of the service worker
     * script in its scope.
     *
     * @experimental
     */
    val versionId: Double
}
