// Generated by Karakum - do not modify it manually!

package electron.core

import node.buffer.Buffer


@seskar.js.JsVirtual
sealed external interface IncomingMessageEvent {
    sealed interface ABORTED : node.events.LegacyEventType
    sealed interface DATA : node.events.LegacyEventType
    sealed interface END : node.events.LegacyEventType
    sealed interface ERROR : node.events.LegacyEventType

    companion object {
        @seskar.js.JsValue("aborted")
        val ABORTED: ABORTED

        @seskar.js.JsValue("data")
        val DATA: DATA

        @seskar.js.JsValue("end")
        val END: END

        @seskar.js.JsValue("error")
        val ERROR: ERROR

        @seskar.js.JsValue("aborted")
        fun aborted(): node.events.EventType<IncomingMessage, js.array.JsTuple>

        @seskar.js.JsValue("data")
        fun data(): node.events.EventType<IncomingMessage, js.array.JsTuple1<Buffer>>

        @seskar.js.JsValue("end")
        fun end(): node.events.EventType<IncomingMessage, js.array.JsTuple>

        @seskar.js.JsValue("error")
        fun error(): node.events.EventType<IncomingMessage, js.array.JsTuple>
    }
}
