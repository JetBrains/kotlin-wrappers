// Generated by Karakum - do not modify it manually!

@file:JsModule("electron/electron")

package electron.core

/* export = Electron.CrossProcessExports; */

/* export = Electron.Main; */

/* export = Electron.Common; */

/* export = Electron.Renderer; */

/* export = Electron.Utility; */


/* export = fs; */


/* export = fs; */

/* declare namespace NodeJS {
    interface Process extends NodeJS.EventEmitter {
        on(event: 'loaded', listener: () => void): this;
        off(event: 'loaded', listener: () => void): this;
        once(event: 'loaded', listener: () => void): this;
        addListener(event: 'loaded', listener: () => void): this;
        removeListener(event: 'loaded', listener: () => void): this;
        on(eventName: string | symbol, listener: (...args: any[]) => void): this;
        off(eventName: string | symbol, listener: (...args: any[]) => void): this;
        once(eventName: string | symbol, listener: (...args: any[]) => void): this;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;
        crash(): void;
        getBlinkMemoryInfo(): Electron.BlinkMemoryInfo;
        getCPUUsage(): Electron.CPUUsage;
        getCreationTime(): (number) | (null);
        getHeapStatistics(): Electron.HeapStatistics;
        getProcessMemoryInfo(): Promise<Electron.ProcessMemoryInfo>;
        getSystemMemoryInfo(): Electron.SystemMemoryInfo;
        getSystemVersion(): string;
        hang(): void;
        setFdLimit(maxDescriptors: number): void;
        takeHeapSnapshot(filePath: string): boolean;
        readonly chrome: string;
        readonly contextId?: string;
        readonly contextIsolated: boolean;
        readonly defaultApp: boolean;
        readonly electron: string;
        readonly isMainFrame: boolean;
        readonly mas: boolean;
        noAsar: boolean;
        noDeprecation: boolean;
        parentPort: Electron.ParentPort;
        readonly resourcesPath: string;
        readonly sandboxed: boolean;
        throwDeprecation: boolean;
        traceDeprecation: boolean;
        traceProcessWarnings: boolean;
        readonly type: ('browser' | 'renderer' | 'worker' | 'utility');
        readonly windowsStore: boolean;
    }
    interface ProcessVersions {
        readonly electron: string;
        readonly chrome: string;
    }
} */
