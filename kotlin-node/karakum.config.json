{
    "input": [
        "<nodeModules>/@types/node/**/*.d.ts"
    ],
    "ignoreInput": [
        "<nodeModules>/@types/node/ts*/**",
        "<nodeModules>/@types/node/assert/strict.d.ts",
        "<nodeModules>/@types/node/constants.d.ts",
        "<nodeModules>/@types/node/console.d.ts",
        "<nodeModules>/@types/node/dom-events.d.ts",
        "<nodeModules>/@types/node/domain.d.ts",
        "<nodeModules>/@types/node/globals.global.d.ts",
        "<nodeModules>/@types/node/punycode.d.ts",
        "<nodeModules>/@types/node/stream/web.d.ts",
        "<nodeModules>/@types/node/string_decoder.d.ts",
        "<nodeModules>/@types/node/timers.d.ts",
        "<nodeModules>/@types/node/timers/promises.d.ts"
    ],
    "output": "src/jsMain/generated",
    "ignoreOutput": [
        "**/_File.kt",
        "**/_FormData.kt",
        "**/_Headers.kt",
        "**/_Request.kt",
        "**/_RequestInit.kt",
        "**/_Response.kt",
        "**/_ResponseInit.kt",
        "**/NodeRequire.kt",
        "**/NodeRequireResolve.kt",
        "**/NodeModule.kt",
        "**/Dict.kt",
        "**/ReadOnlyDict.kt",
        "**/AbortController.kt",
        "**/AbortSignal.kt",
        "**/Array.kt",
        "**/ReadonlyArray.kt",
        "**/String.kt",
        "**/structuredClone.kt",
        "**/ArrayBufferView.kt",
        "**/TypedArray.kt",
        "**/Uint8Array.kt",
        "**/Uint8ClampedArray.kt",
        "**/Uint16Array.kt",
        "**/Uint32Array.kt",
        "**/Int8Array.kt",
        "**/Int16Array.kt",
        "**/Int32Array.kt",
        "**/BigUint64Array.kt",
        "**/BigInt64Array.kt",
        "**/Float32Array.kt",
        "**/Float64Array.kt",
        "**/__promisify__.kt",
        "**/__promisify__*.kt",
        "**/CustomPromisifyLegacy.kt",
        "**/assert/equal.kt",
        "**/assert/notEqual.kt",
        "**/assert/deepEqual.kt",
        "**/assert/notDeepEqual.kt",
        "**/assert/strict/CallTrackerReportInformation.kt",
        "**/assert/strict/CallTrackerCall.kt",
        "**/assert/strict/AssertPredicate.kt",
        "**/assert/strict/AssertionError.kt",
        "**/buffer/atob.kt",
        "**/buffer/btoa.kt",
        "**/buffer/__Blob.kt",
        "**/buffer/Blob.kt",
        "**/buffer/BlobOptions.kt",
        "**/buffer/BlobOptionsEndings.kt",
        "**/buffer/File.kt",
        "**/buffer/FileOptions.kt",
        "**/buffer/FileOptionsEndings.kt",
        "**/childProcess/exec/**",
        "**/childProcess/execfile/**",
        "**/crypto/generatekeypair/**",
        "**/crypto/global/**",
        "**/crypto/webcrypto/**",
        "**/dns/lookupservice/**",
        "**/dns/resolve/**",
        "**/dns/Resolver.kt",
        "**/dns/getServersAsync.kt",
        "**/dns/getDefaultResultOrderAsync.kt",
        "**/dns/GetDefaultResultOrderResultAsync.kt",
        "**/dns/setDefaultResultOrderAsync.kt",
        "**/dns/SetDefaultResultOrderOrderAsync.kt",
        "**/dns/setServersAsync.kt",
        "**/events/global/**",
        "**/events/eventemitter/Abortable.kt",
        "**/events/_DOMEventTarget.kt",
        "**/events/_DOMEventTargetAddEventListenerOpts.kt",
        "**/events/_NodeEventTarget.kt",
        "**/events/AnyRest.kt",
        "**/events/Args.kt",
        "**/events/DefaultEventMap.kt",
        "**/events/EventMap.kt",
        "**/events/Key.kt",
        "**/events/Key2.kt",
        "**/events/Listener.kt",
        "**/events/Listener1.kt",
        "**/events/Listener2.kt",
        "**/module/global/**",
        "**/path/namespace.kt",
        "**/path/PlatformPathDelimiter.kt",
        "**/path/PlatformPathSep.kt",
        "**/path/posix/**",
        "**/path/win32/**",
        "**/perfHooks/global/namespace.kt",
        "**/process/global/namespace.kt",
        "**/readline/createInterface.kt",
        "**/stream/internal.kt",
        "**/stream/ReadableBase.kt",
        "**/stream/WritableBase.kt",
        "**/test/FunctionPropertyNames.kt",
        "**/url/global/**",
        "**/url/URL.kt",
        "**/url/URLSearchParams.kt",
        "**/util/global/**",
        "**/util/ExtractOptionValue.kt",
        "**/util/IfDefaultsFalse.kt",
        "**/util/IfDefaultsTrue.kt",
        "**/util/ParsedOptionToken.kt",
        "**/util/ParsedPositionals.kt",
        "**/util/ParsedPositionalToken.kt",
        "**/util/ParsedValues.kt",
        "**/util/ParsedTokens.kt",
        "**/util/PreciseParsedResults.kt",
        "**/util/PreciseTokenForOptions.kt",
        "**/util/TokenForOptions.kt",
        "**/util/TextDecoder.kt",
        "**/util/TextDecoderDecodeOptions.kt",
        "**/util/TextDecoderOptions.kt",
        "**/util/TextEncoder.kt",
        "**/util/EncodeIntoResult.kt",
        "**/workerThreads/global/namespace.kt",
        "**/workerThreads/BroadcastChannel.kt",
        "**/workerThreads/MessageChannel.kt",
        "**/workerThreads/MessagePort.kt",
        "**/workerThreads/MessagePortEvent.kt"
    ],
    "libraryName": "node",
    "libraryNameOutputPrefix": true,
    "granularity": "top-level",
    "moduleNameMapper": {
        "(.+)": "node:$1",
        "node:node/": "node:",
        "node:node:": "node:",
        "assert(#assert)?": "assert/strict",
        "events#EventEmitter": "events",
        "module#Module": "module",
        "stream#internal": "stream"
    },
    "packageNameMapper": {
        "promises/(.+)\\.kt": "$1Async.kt",
        ".suspendAsync.kt": ".suspend.kt",
        "AsyncOptionsAsync.kt": "OptionsAsync.kt",

        "^assert/assert.kt": "node/assert/assert.fun.kt",
        "^assert/assert/namespace.kt": "node/assert/assert.fun.namespace.kt",
        "^assert/assert": "node/assert",
        "^assert": "node/assert",

        "^async_hooks": "node/asyncHooks",

        "^buffer/global/namespace.kt": "node/buffer/global.namespace.kt",
        "^buffer/global/nodejs/namespace.kt": "node/buffer/global.nodejs.namespace.kt",
        "^buffer/global/Buffer.kt": "node/buffer/Buffer.class.kt",
        "^buffer/global/(.+)\\.kt": "node/buffer/$1.kt",
        "^buffer": "node/buffer",

        "^child_process/ChildProcess.kt": "node/childProcess/ChildProcess.class.kt",
        "^child_process": "node/childProcess",

        "^cluster/Cluster.kt": "node/cluster/Cluster.interface.kt",
        "^cluster": "node/cluster",

        "^crypto/hash.kt": "node/crypto/hash.fun.kt",
        "^crypto/sign.kt": "node/crypto/sign.fun.kt",
        "^crypto/verify.kt": "node/crypto/verify.fun.kt",
        "^crypto/diffieHellman.kt": "node/crypto/diffieHellman.fun.kt",
        "^crypto": "node/crypto",

        "^dgram": "node/dgram",

        "^diagnostics_channel/channel.kt": "node/diagnosticsChannel/channel.fun.kt",
        "^diagnostics_channel/tracingChannel.kt": "node/diagnosticsChannel/tracingChannel.fun.kt",
        "^diagnostics_channel": "node/diagnosticsChannel",

        "^dns": "node/dns",

        "^events/eventemitter/namespace.kt": "node/events/EventEmitter.namespace.kt",
        "^events/eventemitter/EventEmitterAsyncResource.kt": "node/events/EventEmitterAsyncResource.kt",
        "^events/eventemitter/EventEmitterAsyncResourceOptions.kt": "node/events/EventEmitterAsyncResourceOptions.kt",
        "^events/eventemitter/EventEmitterReferencingAsyncResource.kt": "node/events/EventEmitterReferencingAsyncResource.kt",
        "^events": "node/events",

        "^fs/StatfsOptions.kt": "node/fs/StatfsOptions.fun.kt",
        "^fs/realpathsync/native.kt": "node/fs/realpathSync/native.kt",
        "^fs/symlink/Type.kt": "node/fs/SymlinkType.kt",
        "^fs": "node/fs",

        "^http": "node/http",

        "^http2": "node/http2",

        "^https": "node/https",

        "^inspector": "node/inspector",

        "^module/Module.kt": "node/module/Module.class.kt",
        "^module/module": "node/module",
        "^module": "node/module",

        "^net": "node/net",

        "^os/userInfo.kt": "node/os/userInfo.fun.kt",
        "^os": "node/os",

        "^path/path": "node/path",
        "^path": "node/path",

        "^perf_hooks": "node/perfHooks",

        "^process/global/nodejs/Process.kt": "node/process/Process.interface.kt",
        "^process/global/nodejs/(.+)\\.kt": "node/process/$1.kt",
        "^process": "node/process",

        "^querystring": "node/querystring",

        "^readline/ReadLine.kt": "node/readline/ReadLine.interface.kt",
        "^readline": "node/readline",

        "^repl": "node/repl",

        "^stream/internal/namespace.kt": "node/stream/internal.namespace.kt",
        "^stream/internal/Stream.kt": "node/stream/Stream.class.kt",
        "^stream/internal/(.+)\\.kt": "node/stream/$1.kt",
        "^stream": "node/stream",

        "^node/test/Test.kt": "node/test/Test.class.kt",
        "^node/test/test.kt": "node/test/test.fun.kt",
        "^node/test/test/namespace.kt": "node/test/test.fun.namespace.kt",
        "TestComplete.kt": "test/TestComplete.kt",
        "TestCompleteDetails.kt": "test/TestCompleteDetails.kt",
        "TestCoverage.kt": "test/TestCoverage.kt",
        "TestCoverageSummary.kt": "test/TestCoverageSummary.kt",
        "TestCoverageSummaryTotals.kt": "test/TestCoverageSummaryTotals.kt",
        "TestCoverageSummaryFilesItem.kt": "test/TestCoverageSummaryFilesItem.kt",
        "TestCoverageSummaryFilesItemFunctionsItem.kt": "test/TestCoverageSummaryFilesItemFunctionsItem.kt",
        "TestCoverageSummaryFilesItemLinesItem.kt": "test/TestCoverageSummaryFilesItemLinesItem.kt",
        "TestLocationInfo.kt": "test/TestLocationInfo.kt",
        "DiagnosticData.kt": "test/DiagnosticData.kt",
        "TestFail.kt": "test/TestFail.kt",
        "TestFailDetails.kt": "test/TestFailDetails.kt",
        "TestPass.kt": "test/TestPass.kt",
        "TestPassDetails.kt": "test/TestPassDetails.kt",
        "TestPlan.kt": "test/TestPlan.kt",
        "TestStart.kt": "test/TestStart.kt",
        "TestStderr.kt": "test/TestStderr.kt",
        "TestStdout.kt": "test/TestStdout.kt",
        "TestEnqueue.kt": "test/TestEnqueue.kt",
        "TestDequeue.kt": "test/TestDequeue.kt",

        "^tls": "node/tls",

        "^trace_events": "node/traceEvents",

        "^tty": "node/tty",

        "^url/Url.kt": "node/url/Url.interface.kt",
        "^url": "node/url",

        "^util": "node/util",

        "^v8": "node/v8",

        "^vm": "node/vm",

        "^wasi/WASI.kt": "node/wasi/WASI.class.kt",
        "^wasi": "node/wasi",

        "^worker_threads": "node/workerThreads",

        "^zlib/Zlib.kt": "node/zlib/Zlib.interface.kt",
        "^zlib/brotliCompress.kt": "node/zlib/brotliCompress.fun.kt",
        "^zlib/brotliDecompress.kt": "node/zlib/brotliDecompress.fun.kt",
        "^zlib/gzip.kt": "node/zlib/gzip.fun.kt",
        "^zlib/gunzip.kt": "node/zlib/gunzip.fun.kt",
        "^zlib/deflate.kt": "node/zlib/deflate.fun.kt",
        "^zlib/deflateRaw.kt": "node/zlib/deflateRaw.fun.kt",
        "^zlib/inflate.kt": "node/zlib/inflate.fun.kt",
        "^zlib/inflateRaw.kt": "node/zlib/inflateRaw.fun.kt",
        "^zlib/unzip.kt": "node/zlib/unzip.fun.kt",
        "^zlib": "node/zlib",

        "^node/([^/]+)\\.kt": "node/$1/$1.kt",
        "^node/stream/consumers.kt": "node/stream/consumers/consumers.kt",
        "^node/globals/globals.kt": "node/globals.kt",
        "^global/nodejs": "node"
    },
    "importMapper": {
        "node:async_hooks": "node.asyncHooks",
        "(node:)?buffer": {
            "Blob": "web.blob.Blob"
        },
        "node:child_process": {
            "\\*": ""
        },
        "node:crypto": "node.crypto",
        "node:dgram": {
            "\\*": ""
        },
        "node:dns$": {
            "\\*": "",
            ".+": "node.dns."
        },
        "node:dns/promises": {
            "\\*": ""
        },
        "node:events": {
            "Abortable": "web.abort.Abortable",
            ".+": "node.events."
        },
        "node:fs": {
            "\\*": "",
            ".+": "node.fs."
        },
        "node:http": {
            "\\*": "",
            ".+": "node.http."
        },
        "node:module": "node.module",
        "node:net": {
            "\\*": "",
            ".+": "node.net."
        },
        "node:os": "node.os",
        "(node:)?perf_hooks": "node.perfHooks",
        "node:querystring": "node.querystring",
        "node:readline$": {
            "Interface": "",
            ".+": "node.readline."
        },
        "node:readline/promises": {
            "\\*": ""
        },
        "(node:)?stream$": {
            "\\*": "",
            ".+": "node.stream."
        },
        "node:stream/promises": {
            "\\*": ""
        },
        "node:stream/consumers": {
            "\\*": ""
        },
        "node:stream/web": {
            "\\*": "",
            "ReadableStream": "web.streams.ReadableStream"
        },
        "node:test": "node.test",
        "node:tls": {
            "\\*": "",
            ".+": "node.tls."
        },
        "node:tty": {
            "\\*": ""
        },
        "(node:)?url": {
            "\\*": "",
            "URL": "web.url.URL",
            "URLSearchParams": "web.url.URLSearchParams"
        },
        "(node:)?util$": {
            "TextDecoder": "",
            "TextEncoder": "",
            ".+": "node.util."
        },
        "node:util/types": {
            "\\*": ""
        },
        "node:vm": "node.vm",
        "(node:)?worker_threads": {
            "BroadcastChannel": "web.broadcast.BroadcastChannel",
            "MessageChannel": "web.messaging.MessageChannel",
            "MessagePort": "web.messaging.MessagePort",
            ".+": "node.workerThreads."
        }
    },
    "importInjector": {
        "Async.kt": [
            "js.promise.Promise"
        ],
        ".contract.kt": [
            "kotlin.contracts.contract"
        ],
        "ReadableStream.kt": [
            "js.typedarrays.Uint8Array",
            "node.events.EventEmitter"
        ],
        "Require.kt": [
            "node.Module",
            "node.Module as NodeModule"
        ],
        "WritableStream.kt": [
            "js.typedarrays.Uint8Array",
            "node.events.EventEmitter"
        ],
        "assert/doesNotMatch.kt": [
            "kotlin.js.RegExp"
        ],
        "assert/doesNotReject.kt": [
            "js.promise.Promise"
        ],
        "assert/doesNotReject.suspend.kt": [
            "js.promise.Promise"
        ],
        "assert/match.kt": [
            "kotlin.js.RegExp"
        ],
        "assert/rejects.kt": [
            "js.promise.Promise"
        ],
        "assert/rejects.suspend.kt": [
            "js.promise.Promise"
        ],
        "buffer/Buffer.class.kt": [
            "js.buffer.ArrayBuffer",
            "js.buffer.SharedArrayBuffer",
            "js.array.ReadonlyArray",
            "js.typedarrays.Uint8Array"
        ],
        "buffer/File.kt": [
            "web.blob.Blob"
        ],
        "buffer/isAscii.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "buffer/isUtf8.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "buffer/resolveObjectURL.kt": [
            "web.blob.Blob"
        ],
        "buffer/transcode.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "childProcess/ExecFileOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "childProcess/ExecOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "childProcess/PromiseWithChild.kt": [
            "js.promise.Promise"
        ],
        "childProcess/execFile.kt": [
            "js.array.ReadonlyArray"
        ],
        "childProcess/execFileSync.kt": [
            "js.array.ReadonlyArray"
        ],
        "childProcess/fork.kt": [
            "js.array.ReadonlyArray"
        ],
        "childProcess/spawn.kt": [
            "js.array.ReadonlyArray"
        ],
        "childProcess/spawnSync.kt": [
            "js.array.ReadonlyArray"
        ],
        "cluster/Cluster.interface.kt": [
            "node.events.EventEmitter"
        ],
        "cluster/Worker.kt": [
            "node.events.EventEmitter"
        ],
        "crypto/Cipher.kt": [
            "node.stream.TransformOptions"
        ],
        "crypto/Decipher.kt": [
            "node.stream.TransformOptions"
        ],
        "crypto/Hash.kt": [
            "node.stream.TransformOptions"
        ],
        "crypto/Hmac.kt": [
            "node.stream.TransformOptions"
        ],
        "crypto/Sign.kt": [
            "node.stream.WritableOptions"
        ],
        "crypto/Verify.kt": [
            "node.stream.WritableOptions"
        ],
        "crypto/createDiffieHellman.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "crypto/generatePrime.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "crypto/generatePrimeSync.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "crypto/hkdf.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "crypto/hkdfSync.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "dgram/Socket.kt": [
            "js.array.ReadonlyArray",
            "js.typedarrays.Uint8Array"
        ],
        "diagnosticsChannel/TracingChannel.kt": [
            "js.promise.Promise"
        ],
        "dns/setServers.kt": [
            "js.array.ReadonlyArray"
        ],
        "events/EventEmitter.kt": [
            "js.array.JsTuple",
            "js.array.JsTuple1",
            "js.disposable.Disposable",
            "js.iterable.AsyncIterableIterator",
            "js.promise.Promise",
            "web.abort.AbortSignal",
            "web.events.Event",
            "web.events.EventTarget"
        ],
        "events/EventEmitter.ext.kt": [
            "js.array.JsTuple"
        ],
        "events/StaticEventEmitterOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "fs/Dir.kt": [
            "js.iterable.AsyncIterable",
            "js.promise.Promise"
        ],
        "fs/FileHandleAsync.kt": [
            "js.array.ReadonlyArray",
            "js.typedarrays.Uint8Array",
            "node.readline.Interface as ReadlineInterface"
        ],
        "fs/FileHandleWriteResultPayloadAsync.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "fs/ReadStream.kt": [
            "node.stream.ReadableOptions"
        ],
        "fs/StatsBase.kt": [
            "js.date.Date"
        ],
        "fs/Stats.kt": [
            "js.date.Date"
        ],
        "fs/StreamOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "fs/WriteStream.kt": [
            "node.stream.WritableOptions"
        ],
        "fs/appendFile.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "fs/appendFileAsync.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "fs/appendFileSync.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "fs/appendFile.suspend.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "fs/cpAsync.kt": [
            "web.url.URL"
        ],
        "fs/cp.suspend.kt": [
            "web.url.URL"
        ],
        "fs/openAsBlob.kt": [
            "js.promise.Promise",
            "web.blob.Blob"
        ],
        "fs/openAsBlob.suspend.kt": [
            "web.blob.Blob"
        ],
        "fs/readv.kt": [
            "js.array.ReadonlyArray"
        ],
        "fs/readvSync.kt": [
            "js.array.ReadonlyArray"
        ],
        "fs/realpath/native.kt": [
            "node.fs.BufferEncodingOption",
            "node.fs.EncodingOption",
            "node.fs.PathLike"
        ],
        "fs/realpathSync/native.kt": [
            "node.fs.BufferEncodingOption",
            "node.fs.EncodingOption",
            "node.fs.PathLike"
        ],
        "fs/watchAsync.kt": [
            "js.iterable.AsyncIterable"
        ],
        "fs/writeFileAsync.kt": [
            "js.iterable.AsyncIterable"
        ],
        "fs/writeFile.suspend.kt": [
            "js.iterable.AsyncIterable"
        ],
        "fs/writev.kt": [
            "js.array.ReadonlyArray"
        ],
        "fs/writevSync.kt": [
            "js.array.ReadonlyArray"
        ],
        "http/ClientRequestArgs.kt": [
            "web.abort.AbortSignal"
        ],
        "http/OutgoingMessage.kt": [
            "js.array.ReadonlyArray"
        ],
        "http2/ClientSessionRequestOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "http2/Http2ServerResponse.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "http2/Http2Session.kt": [
            "node.events.EventEmitter"
        ],
        "http2/getUnpackedSettings.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "https/RequestOptions.kt": [
            "node.tls.PeerCertificate"
        ],
        "https/Server.kt": [
            "node.http.IncomingMessage",
            "node.http.ServerResponse"
        ],
        "https/ServerEvent.kt": [
            "node.http.IncomingMessage",
            "node.http.ServerResponse"
        ],
        "https/ServerOptions.kt": [
            "node.http.IncomingMessage",
            "node.http.ServerResponse"
        ],
        "https/createServer.kt": [
            "node.http.IncomingMessage",
            "node.http.ServerResponse"
        ],
        "inspector/Session.kt": [
            "node.events.EventEmitter"
        ],
        "inspector/open.kt": [
            "js.disposable.Disposable"
        ],
        "net/OnReadOpts.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "net/Socket.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "net/SocketConstructorOpts.kt": [
            "web.abort.AbortSignal"
        ],
        "module/Module.class.kt": [
            "node.Module as NodeModule",
            "node.Require",
            "node.Require as NodeRequire"
        ],
        "os/constants/namespace.kt": [
            "node.os.SignalConstants"
        ],
        "perfHooks/PerformanceObserverObserveTypesOptions.kt": [
            "js.array.ReadonlyArray"
        ],
        "process/MultipleResolveListener.kt": [
            "js.promise.Promise"
        ],
        "process/Process.interface.kt": [
            "js.array.ReadonlyArray",
            "js.collections.ReadonlySet",
            "js.promise.Promise",
            "web.url.URL",
            "node.Module",
            "node.events.EventEmitter"
        ],
        "process/ProcessEvent.kt": [
            "js.promise.Promise"
        ],
        "process/ProcessEnv.kt": [
            "node.Dict"
        ],
        "process/ProcessVersions.kt": [
            "node.Dict"
        ],
        "process/RejectionHandledListener.kt": [
            "js.promise.Promise"
        ],
        "process/Socket.kt": [
            "node.ReadWriteStream"
        ],
        "process/UnhandledRejectionListener.kt": [
            "js.promise.Promise"
        ],
        "repl/Recoverable.kt": [
            "js.errors.SyntaxError"
        ],
        "repl/REPLServer.kt": [
            "node.readline._Interface as Interface"
        ],
        "sea/getAsset.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "sea/getAssetAsBlob.kt": [
            "web.blob.Blob"
        ],
        "stream/ArrayOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "stream/addAbortSignal.kt": [
            "web.abort.AbortSignal"
        ],
        "stream/Duplex.kt": [
            "js.buffer.ArrayBuffer",
            "js.iterable.AsyncIterable",
            "js.generator.AsyncGeneratorFunction",
            "js.promise.Promise"
        ],
        "stream/pipeline.kt": [
            "js.array.ReadonlyArray"
        ],
        "stream/pipelineAsync.kt": [
            "js.array.ReadonlyArray"
        ],
        "stream/PipelineDestinationIterableFunction.kt": [
            "js.iterable.AsyncIterable"
        ],
        "stream/PipelineDestinationPromiseFunction.kt": [
            "js.promise.Promise",
            "js.iterable.AsyncIterable"
        ],
        "stream/PipelineOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "stream/pipeline.suspend.kt": [
            "js.array.ReadonlyArray"
        ],
        "stream/Readable.kt": [
            "js.typedarrays.Uint8Array",
            "js.iterable.AsyncIterable",
            "js.iterable.AsyncIterableIterator",
            "js.promise.Promise",
            "node.ReadableStreamPipeOptions",
            "node.WritableStream"
        ],
        "stream/StreamComposeOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "stream/Stream.class.kt": [
            "js.iterable.AsyncIterable"
        ],
        "stream/Writable.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "stream/consumers/arrayBuffer.kt": [
            "js.promise.Promise",
            "js.buffer.ArrayBuffer",
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/arrayBuffer.suspend.kt": [
            "js.buffer.ArrayBuffer",
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/blob.kt": [
            "js.promise.Promise",
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/blob.suspend.kt": [
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/buffer.kt": [
            "js.promise.Promise",
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/buffer.suspend.kt": [
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/json.kt": [
            "js.promise.Promise",
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/json.suspend.kt": [
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/text.kt": [
            "js.promise.Promise",
            "js.iterable.AsyncIterable"
        ],
        "stream/consumers/text.suspend.kt": [
            "js.iterable.AsyncIterable"
        ],
        "test/HookOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "test/RunOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "test/SuiteContext.kt": [
            "web.abort.AbortSignal"
        ],
        "test/TestContext.kt": [
            "web.abort.AbortSignal"
        ],
        "test/TestContextTest.kt": [
            "js.promise.Promise"
        ],
        "test/TestOptions.kt": [
            "web.abort.AbortSignal"
        ],
        "test/describe.kt": [
            "js.promise.Promise"
        ],
        "test/describe/only.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/describe/only.suspend.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/describe/skip.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/describe/skip.suspend.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/describe/todo.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/describe/todo.suspend.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/it.kt": [
            "js.promise.Promise"
        ],
        "test/it/only.kt": [
            "js.promise.Promise",
            "node.test.TestFn",
            "node.test.TestOptions"
        ],
        "test/it/only.suspend.kt": [
            "js.promise.Promise",
            "node.test.TestFn",
            "node.test.TestOptions"
        ],
        "test/it/skip.kt": [
            "js.promise.Promise",
            "node.test.TestFn",
            "node.test.TestOptions"
        ],
        "test/it/skip.suspend.kt": [
            "js.promise.Promise",
            "node.test.TestFn",
            "node.test.TestOptions"
        ],
        "test/it/todo.kt": [
            "js.promise.Promise",
            "node.test.TestFn",
            "node.test.TestOptions"
        ],
        "test/it/todo.suspend.kt": [
            "js.promise.Promise",
            "node.test.TestFn",
            "node.test.TestOptions"
        ],
        "test/suite.kt": [
            "js.promise.Promise"
        ],
        "test/suite/only.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/suite/only.suspend.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/suite/skip.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/suite/skip.suspend.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/suite/todo.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/suite/todo.suspend.kt": [
            "js.promise.Promise",
            "node.test.SuiteFn",
            "node.test.TestOptions"
        ],
        "test/only.kt": [
            "js.promise.Promise"
        ],
        "test/skip.kt": [
            "js.promise.Promise"
        ],
        "test/test.fun.kt": [
            "js.promise.Promise"
        ],
        "test/todo.kt": [
            "js.promise.Promise"
        ],
        "test/reporters/TestEventGenerator.kt": [
            "js.generator.AsyncGenerator"
        ],
        "test/reporters/dot.kt": [
            "js.generator.AsyncGenerator"
        ],
        "test/reporters/junit.kt": [
            "js.generator.AsyncGenerator"
        ],
        "test/reporters/tap.kt": [
            "js.generator.AsyncGenerator"
        ],
        "tls/namespace.kt": [
            "js.array.ReadonlyArray"
        ],
        "url/fileURLToPath.kt": [
            "web.url.URL"
        ],
        "url/format.kt": [
            "web.url.URL"
        ],
        "url/pathToFileURL.kt": [
            "web.url.URL"
        ],
        "url/urlToHttpOptions.kt": [
            "web.url.URL"
        ],
        "util/MIMEParams.kt": [
            "js.iterable.IterableIterator"
        ],
        "util/aborted.kt": [
            "js.promise.Promise",
            "web.abort.AbortSignal"
        ],
        "util/aborted.suspend.kt": [
            "web.abort.AbortSignal"
        ],
        "util/callbackify.kt": [
            "js.promise.Promise"
        ],
        "util/promisify.kt": [
            "js.promise.Promise"
        ],
        "util/transferableAbortController.kt": [
            "web.abort.AbortController"
        ],
        "util/transferableAbortSignal.kt": [
            "web.abort.AbortSignal"
        ],
        "util/inspect/namespace.kt": [
            "node.util.InspectOptions"
        ],
        "util/inspect/Styles.kt": [
            "node.util.Style"
        ],
        "util/isDate.contract.kt": [
            "js.date.Date"
        ],
        "util/isRegExp.contract.kt": [
            "kotlin.js.RegExp"
        ],
        "util/types/isAnyArrayBuffer.contract.kt": [
            "js.buffer.ArrayBufferLike"
        ],
        "util/types/isArrayBuffer.contract.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "util/types/isBigInt64Array.contract.kt": [
            "js.typedarrays.BigInt64Array"
        ],
        "util/types/isBigUint64Array.contract.kt": [
            "js.typedarrays.BigUint64Array"
        ],
        "util/types/isDataView.contract.kt": [
            "js.buffer.DataView"
        ],
        "util/types/isDate.contract.kt": [
            "js.date.Date"
        ],
        "util/types/isFloat32Array.contract.kt": [
            "js.typedarrays.Float32Array"
        ],
        "util/types/isFloat64Array.contract.kt": [
            "js.typedarrays.Float64Array"
        ],
        "util/types/isGeneratorFunction.contract.kt": [
            "js.generator.GeneratorFunction"
        ],
        "util/types/isGeneratorObject.contract.kt": [
            "js.generator.Generator"
        ],
        "util/types/isInt8Array.contract.kt": [
            "js.typedarrays.Int8Array"
        ],
        "util/types/isInt16Array.contract.kt": [
            "js.typedarrays.Int16Array"
        ],
        "util/types/isInt32Array.contract.kt": [
            "js.typedarrays.Int32Array"
        ],
        "util/types/isPromise.contract.kt": [
            "js.promise.Promise"
        ],
        "util/types/isRegExp.contract.kt": [
            "kotlin.js.RegExp"
        ],
        "util/types/isSharedArrayBuffer.contract.kt": [
            "js.buffer.SharedArrayBuffer"
        ],
        "util/types/isSymbolObject.contract.kt": [
            "js.symbol.Symbol"
        ],
        "util/types/isUint8Array.contract.kt": [
            "js.typedarrays.Uint8Array"
        ],
        "util/types/isUint8ClampedArray.contract.kt": [
            "js.typedarrays.Uint8ClampedArray"
        ],
        "util/types/isUint16Array.contract.kt": [
            "js.typedarrays.Uint16Array"
        ],
        "util/types/isUint32Array.contract.kt": [
            "js.typedarrays.Uint32Array"
        ],
        "v8/After.kt": [
            "js.promise.Promise"
        ],
        "v8/Before.kt": [
            "js.promise.Promise"
        ],
        "v8/Deserializer.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "v8/Init.kt": [
            "js.promise.Promise"
        ],
        "v8/Serializer.kt": [
            "js.buffer.ArrayBuffer"
        ],
        "v8/Settled.kt": [
            "js.promise.Promise"
        ],
        "vm/CompileFunctionResult.kt": [
            "node.buffer.Buffer"
        ],
        "vm/Module.kt": [
            "js.promise.Promise"
        ],
        "vm/SourceTextModuleOptions.kt": [
            "js.import.ImportMeta"
        ],
        "vm/compileFunction.kt": [
            "js.array.ReadonlyArray"
        ],
        "vm/measureMemory.kt": [
            "js.promise.Promise"
        ],
        "workerThreads/Worker.kt": [
            "js.array.ReadonlyArray",
            "js.promise.Promise"
        ],
        "workerThreads/moveMessagePortToContext.kt": [
            "web.messaging.MessagePort"
        ],
        "workerThreads/namespace.kt": [
            "web.messaging.MessagePort"
        ],
        "workerThreads/receiveMessageOnPort.kt": [
            "web.messaging.MessagePort"
        ]
    },
    "namespaceStrategy": {
        "NodeJS": "package",
        "buffer.global": "package",
        "crypto.global": "package",
        "events.global": "package",
        "module.global": "package",
        "perf_hooks.global": "package",
        "process.global": "package",
        "url.global": "package",
        "util.global": "package",
        "worker_threads.global": "package",
        "global": "object",
        "node:test": "package",
        "node:sea": "package",
        "node:.+": "ignore",
        ".+": "package"
    },
    "conflictResolutionStrategy": {
        "ExecFileObjectEncodingOptions.kt": "replace",
        "ExecStringOptions.kt": "replace",
        "ReaddirOptionsAsync.kt": "replace",
        "ClientHttp2StreamAddListenerListenerHeaders.kt": "replace",
        "ClientHttp2StreamEmitHeaders.kt": "replace",
        "ClientHttp2StreamOnListenerHeaders.kt": "replace",
        "ClientHttp2StreamOnceListenerHeaders.kt": "replace",
        "ClientHttp2StreamPrependListenerListenerHeaders.kt": "replace",
        "ClientHttp2StreamPrependOnceListenerListenerHeaders.kt": "replace",
        "WritableOptionsWritevChunksItem.kt": "replace",
        "WritableWritevChunksItem.kt": "replace"
    }
}
