// Generated by Karakum - do not modify it manually!

package node.test

import web.abort.AbortSignal

sealed external interface RunOptions {
    /**
     * If a number is provided, then that many test processes would run in parallel, where each process corresponds to one test file.
     * If `true`, it would run `os.availableParallelism() - 1` test files in parallel. If `false`, it would only run one test file at a time.
     * @default false
     */
    var concurrency: Any? // number | boolean | undefined

    /**
     * An array containing the list of files to run. If omitted, files are run according to the
     * [test runner execution model](https://nodejs.org/docs/latest-v22.x/api/test.html#test-runner-execution-model).
     */
    var files: (js.array.ReadonlyArray<String>)?

    /**
     * Configures the test runner to exit the process once all known
     * tests have finished executing even if the event loop would
     * otherwise remain active.
     * @default false
     */
    var forceExit: Boolean?

    /**
     * An array containing the list of glob patterns to match test files.
     * This option cannot be used together with `files`. If omitted, files are run according to the
     * [test runner execution model](https://nodejs.org/docs/latest-v22.x/api/test.html#test-runner-execution-model).
     * @since v22.6.0
     */
    var globPatterns: (js.array.ReadonlyArray<String>)?

    /**
     * Sets inspector port of test child process.
     * This can be a number, or a function that takes no arguments and returns a
     * number. If a nullish value is provided, each process gets its own port,
     * incremented from the primary's `process.debugPort`. This option is ignored
     * if the `isolation` option is set to `'none'` as no child processes are
     * spawned.
     * @default undefined
     */
    var inspectPort: Any? // number | (() => number) | undefined

    /**
     * Configures the type of test isolation. If set to
     * `'process'`, each test file is run in a separate child process. If set to
     * `'none'`, all test files run in the current process.
     * @default 'process'
     * @since v22.8.0
     */
    var isolation: RunOptionsIsolation?

    /**
     * If truthy, the test context will only run tests that have the `only` option set
     */
    var only: Boolean?

    /**
     * A function that accepts the `TestsStream` instance and can be used to setup listeners before any tests are run.
     * @default undefined
     */
    var setup: ((reporter: TestsStream) -> js.promise.PromiseResult<js.core.Void>)?

    /**
     * An array of CLI flags to pass to the `node` executable when
     * spawning the subprocesses. This option has no effect when `isolation` is `'none`'.
     * @since v22.10.0
     * @default []
     */
    var execArgv: (js.array.ReadonlyArray<String>)?

    /**
     * An array of CLI flags to pass to each test file when spawning the
     * subprocesses. This option has no effect when `isolation` is `'none'`.
     * @since v22.10.0
     * @default []
     */
    var argv: (js.array.ReadonlyArray<String>)?

    /**
     * Allows aborting an in-progress test execution.
     */
    var signal: AbortSignal?

    /**
     * If provided, only run tests whose name matches the provided pattern.
     * Strings are interpreted as JavaScript regular expressions.
     * @default undefined
     */
    var testNamePatterns: Any? // string | RegExp | ReadonlyArray<string | RegExp> | undefined

    /**
     * A String, RegExp or a RegExp Array, that can be used to exclude running tests whose
     * name matches the provided pattern. Test name patterns are interpreted as JavaScript
     * regular expressions. For each test that is executed, any corresponding test hooks,
     * such as `beforeEach()`, are also run.
     * @default undefined
     * @since v22.1.0
     */
    var testSkipPatterns: Any? // string | RegExp | ReadonlyArray<string | RegExp> | undefined

    /**
     * The number of milliseconds after which the test execution will fail.
     * If unspecified, subtests inherit this value from their parent.
     * @default Infinity
     */
    var timeout: Double?

    /**
     * Whether to run in watch mode or not.
     * @default false
     */
    var watch: Boolean?

    /**
     * Running tests in a specific shard.
     * @default undefined
     */
    var shard: TestShard?

    /**
     * enable [code coverage](https://nodejs.org/docs/latest-v22.x/api/test.html#collecting-code-coverage) collection.
     * @since v22.10.0
     * @default false
     */
    var coverage: Boolean?

    /**
     * Excludes specific files from code coverage
     * using a glob pattern, which can match both absolute and relative file paths.
     * This property is only applicable when `coverage` was set to `true`.
     * If both `coverageExcludeGlobs` and `coverageIncludeGlobs` are provided,
     * files must meet **both** criteria to be included in the coverage report.
     * @since v22.10.0
     * @default undefined
     */
    var coverageExcludeGlobs: Any? // string | readonly string[] | undefined

    /**
     * Includes specific files in code coverage
     * using a glob pattern, which can match both absolute and relative file paths.
     * This property is only applicable when `coverage` was set to `true`.
     * If both `coverageExcludeGlobs` and `coverageIncludeGlobs` are provided,
     * files must meet **both** criteria to be included in the coverage report.
     * @since v22.10.0
     * @default undefined
     */
    var coverageIncludeGlobs: Any? // string | readonly string[] | undefined

    /**
     * Require a minimum percent of covered lines. If code
     * coverage does not reach the threshold specified, the process will exit with code `1`.
     * @since v22.10.0
     * @default 0
     */
    var lineCoverage: Double?

    /**
     * Require a minimum percent of covered branches. If code
     * coverage does not reach the threshold specified, the process will exit with code `1`.
     * @since v22.10.0
     * @default 0
     */
    var branchCoverage: Double?

    /**
     * Require a minimum percent of covered functions. If code
     * coverage does not reach the threshold specified, the process will exit with code `1`.
     * @since v22.10.0
     * @default 0
     */
    var functionCoverage: Double?
}
