// Generated by Karakum - do not modify it manually!

@file:JsModule("node:sqlite")

package node.sqlite

import js.disposable.Disposable
import js.typedarrays.Uint8Array
import web.url.URL

/**
 * This class represents a single [connection](https://www.sqlite.org/c3ref/sqlite3.html) to a SQLite database. All APIs
 * exposed by this class execute synchronously.
 * @since v22.5.0
 */
external class DatabaseSync : Disposable {
    /**
     * Constructs a new `DatabaseSync` instance.
     * @param path The path of the database.
     * A SQLite database can be stored in a file or completely [in memory](https://www.sqlite.org/inmemorydb.html).
     * To use a file-backed database, the path should be a file path.
     * To use an in-memory database, the path should be the special name `':memory:'`.
     * @param options Configuration options for the database connection.
     */
    constructor (path: String, options: DatabaseSyncOptions = definedExternally)

    /**
     * Constructs a new `DatabaseSync` instance.
     * @param path The path of the database.
     * A SQLite database can be stored in a file or completely [in memory](https://www.sqlite.org/inmemorydb.html).
     * To use a file-backed database, the path should be a file path.
     * To use an in-memory database, the path should be the special name `':memory:'`.
     * @param options Configuration options for the database connection.
     */
    constructor (path: node.buffer.Buffer<*>, options: DatabaseSyncOptions = definedExternally)

    /**
     * Constructs a new `DatabaseSync` instance.
     * @param path The path of the database.
     * A SQLite database can be stored in a file or completely [in memory](https://www.sqlite.org/inmemorydb.html).
     * To use a file-backed database, the path should be a file path.
     * To use an in-memory database, the path should be the special name `':memory:'`.
     * @param options Configuration options for the database connection.
     */
    constructor (path: URL, options: DatabaseSyncOptions = definedExternally)

    fun <T : SQLInputValue> aggregate(
        name: String,
        options: AggregateOptions<T>,
    )

    /**
     * Closes the database connection. An exception is thrown if the database is not
     * open. This method is a wrapper around [`sqlite3_close_v2()`](https://www.sqlite.org/c3ref/close.html).
     * @since v22.5.0
     */
    fun close()

    /**
     * Loads a shared library into the database connection. This method is a wrapper
     * around [`sqlite3_load_extension()`](https://www.sqlite.org/c3ref/load_extension.html). It is required to enable the
     * `allowExtension` option when constructing the `DatabaseSync` instance.
     * @since v22.13.0
     * @param path The path to the shared library to load.
     */
    fun loadExtension(path: String)

    /**
     * Enables or disables the `loadExtension` SQL function, and the `loadExtension()`
     * method. When `allowExtension` is `false` when constructing, you cannot enable
     * loading extensions for security reasons.
     * @since v22.13.0
     * @param allow Whether to allow loading extensions.
     */
    fun enableLoadExtension(allow: Boolean)

    /**
     * This method is a wrapper around [`sqlite3_db_filename()`](https://sqlite.org/c3ref/db_filename.html)
     * @since v22.16.0
     * @param dbName Name of the database. This can be `'main'` (the default primary database) or any other
     * database that has been added with [`ATTACH DATABASE`](https://www.sqlite.org/lang_attach.html) **Default:** `'main'`.
     * @returns The location of the database file. When using an in-memory database,
     * this method returns null.
     */
    fun location(dbName: String = definedExternally): String?

    /**
     * This method allows one or more SQL statements to be executed without returning
     * any results. This method is useful when executing SQL statements read from a
     * file. This method is a wrapper around [`sqlite3_exec()`](https://www.sqlite.org/c3ref/exec.html).
     * @since v22.5.0
     * @param sql A SQL string to execute.
     */
    fun exec(sql: String)

    /**
     * This method is used to create SQLite user-defined functions. This method is a
     * wrapper around [`sqlite3_create_function_v2()`](https://www.sqlite.org/c3ref/create_function.html).
     * @since v22.13.0
     * @param name The name of the SQLite function to create.
     * @param options Optional configuration settings for the function.
     * @param func The JavaScript function to call when the SQLite
     * function is invoked. The return value of this function should be a valid
     * SQLite data type: see
     * [Type conversion between JavaScript and SQLite](https://nodejs.org/docs/latest-v22.x/api/sqlite.html#type-conversion-between-javascript-and-sqlite).
     * The result defaults to `NULL` if the return value is `undefined`.
     */
    fun function(
        name: String,
        options: FunctionOptions,
        func: Function<SQLInputValue>, // (...args: SQLOutputValue[]) => SQLInputValue
    )

    fun function(name: String, func: Function<SQLInputValue> /* (...args: SQLOutputValue[]) => SQLInputValue */)

    /**
     * Whether the database is currently open or not.
     * @since v22.15.0
     */
    val isOpen: Boolean

    /**
     * Whether the database is currently within a transaction. This method
     * is a wrapper around [`sqlite3_get_autocommit()`](https://sqlite.org/c3ref/get_autocommit.html).
     * @since v22.16.0
     */
    val isTransaction: Boolean

    /**
     * Opens the database specified in the `path` argument of the `DatabaseSync`constructor. This method should only be used when the database is not opened via
     * the constructor. An exception is thrown if the database is already open.
     * @since v22.5.0
     */
    fun open()

    /**
     * Compiles a SQL statement into a [prepared statement](https://www.sqlite.org/c3ref/stmt.html). This method is a wrapper
     * around [`sqlite3_prepare_v2()`](https://www.sqlite.org/c3ref/prepare.html).
     * @since v22.5.0
     * @param sql A SQL string to compile to a prepared statement.
     * @return The prepared statement.
     */
    fun prepare(sql: String): StatementSync

    /**
     * Creates and attaches a session to the database. This method is a wrapper around
     * [`sqlite3session_create()`](https://www.sqlite.org/session/sqlite3session_create.html) and
     * [`sqlite3session_attach()`](https://www.sqlite.org/session/sqlite3session_attach.html).
     * @param options The configuration options for the session.
     * @returns A session handle.
     * @since v22.12.0
     */
    fun createSession(options: CreateSessionOptions = definedExternally): Session

    /**
     * An exception is thrown if the database is not
     * open. This method is a wrapper around
     * [`sqlite3changeset_apply()`](https://www.sqlite.org/session/sqlite3changeset_apply.html).
     *
     * ```js
     * const sourceDb = new DatabaseSync(':memory:');
     * const targetDb = new DatabaseSync(':memory:');
     *
     * sourceDb.exec('CREATE TABLE data(key INTEGER PRIMARY KEY, value TEXT)');
     * targetDb.exec('CREATE TABLE data(key INTEGER PRIMARY KEY, value TEXT)');
     *
     * const session = sourceDb.createSession();
     *
     * const insert = sourceDb.prepare('INSERT INTO data (key, value) VALUES (?, ?)');
     * insert.run(1, 'hello');
     * insert.run(2, 'world');
     *
     * const changeset = session.changeset();
     * targetDb.applyChangeset(changeset);
     * // Now that the changeset has been applied, targetDb contains the same data as sourceDb.
     * ```
     * @param changeset A binary changeset or patchset.
     * @param options The configuration options for how the changes will be applied.
     * @returns Whether the changeset was applied successfully without being aborted.
     * @since v22.12.0
     */
    fun applyChangeset(
        changeset: Uint8Array<*>,
        options: ApplyChangesetOptions = definedExternally,
    ): Boolean
}
