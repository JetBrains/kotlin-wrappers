// Generated by Karakum - do not modify it manually!

package node.assert

sealed external interface AssertMethodNames {
    companion object {
        @seskar.js.JsValue("deepEqual")
        val deepEqual: AssertMethodNames

        @seskar.js.JsValue("deepStrictEqual")
        val deepStrictEqual: AssertMethodNames

        @seskar.js.JsValue("doesNotMatch")
        val doesNotMatch: AssertMethodNames

        @seskar.js.JsValue("doesNotReject")
        val doesNotReject: AssertMethodNames

        @seskar.js.JsValue("doesNotThrow")
        val doesNotThrow: AssertMethodNames

        @seskar.js.JsValue("equal")
        val equal: AssertMethodNames

        @seskar.js.JsValue("fail")
        val fail: AssertMethodNames

        @seskar.js.JsValue("ifError")
        val ifError: AssertMethodNames

        @seskar.js.JsValue("match")
        val match: AssertMethodNames

        @seskar.js.JsValue("notDeepEqual")
        val notDeepEqual: AssertMethodNames

        @seskar.js.JsValue("notDeepStrictEqual")
        val notDeepStrictEqual: AssertMethodNames

        @seskar.js.JsValue("notEqual")
        val notEqual: AssertMethodNames

        @seskar.js.JsValue("notStrictEqual")
        val notStrictEqual: AssertMethodNames

        @seskar.js.JsValue("ok")
        val ok: AssertMethodNames

        @seskar.js.JsValue("partialDeepStrictEqual")
        val partialDeepStrictEqual: AssertMethodNames

        @seskar.js.JsValue("rejects")
        val rejects: AssertMethodNames

        @seskar.js.JsValue("strictEqual")
        val strictEqual: AssertMethodNames

        @seskar.js.JsValue("throws")
        val throws: AssertMethodNames
    }
}
