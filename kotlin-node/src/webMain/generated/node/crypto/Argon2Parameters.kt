// Generated by Karakum - do not modify it manually!

package node.crypto

sealed external interface Argon2Parameters {
    /**
     * REQUIRED, this is the password for password hashing applications of Argon2.
     */
    var message: Any // string | ArrayBuffer | NodeJS.ArrayBufferView

    /**
     * REQUIRED, must be at least 8 bytes long. This is the salt for password hashing applications of Argon2.
     */
    var nonce: Any // string | ArrayBuffer | NodeJS.ArrayBufferView

    /**
     * REQUIRED, degree of parallelism determines how many computational chains (lanes)
     * can be run. Must be greater than 1 and less than `2**24-1`.
     */
    var parallelism: Double

    /**
     * REQUIRED, the length of the key to generate. Must be greater than 4 and
     * less than `2**32-1`.
     */
    var tagLength: Double

    /**
     * REQUIRED, memory cost in 1KiB blocks. Must be greater than
     * `8 * parallelism` and less than `2**32-1`. The actual number of blocks is rounded
     * down to the nearest multiple of `4 * parallelism`.
     */
    var memory: Double

    /**
     * REQUIRED, number of passes (iterations). Must be greater than 1 and less
     * than `2**32-1`.
     */
    var passes: Double

    /**
     * OPTIONAL, Random additional input,
     * similar to the salt, that should **NOT** be stored with the derived key. This is known as pepper in
     * password hashing applications. If used, must have a length not greater than `2**32-1` bytes.
     */
    var secret: Any? // string | ArrayBuffer | NodeJS.ArrayBufferView | undefined

    /**
     * OPTIONAL, Additional data to
     * be added to the hash, functionally equivalent to salt or secret, but meant for
     * non-random data. If used, must have a length not greater than `2**32-1` bytes.
     */
    var associatedData: Any? // string | ArrayBuffer | NodeJS.ArrayBufferView | undefined
}
