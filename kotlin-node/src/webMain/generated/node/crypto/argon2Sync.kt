// Generated by Karakum - do not modify it manually!

@file:JsModule("node:crypto")

package node.crypto

/**
 * Provides a synchronous [Argon2][] implementation. Argon2 is a password-based
 * key derivation function that is designed to be expensive computationally and
 * memory-wise in order to make brute-force attacks unrewarding.
 *
 * The `nonce` should be as unique as possible. It is recommended that a nonce is
 * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.
 *
 * When passing strings for `message`, `nonce`, `secret` or `associatedData`, please
 * consider [caveats when using strings as inputs to cryptographic APIs](https://nodejs.org/docs/latest-v24.x/api/crypto.html#using-strings-as-inputs-to-cryptographic-apis).
 *
 * An exception is thrown when key derivation fails, otherwise the derived key is
 * returned as a `Buffer`.
 *
 * An exception is thrown when any of the input arguments specify invalid values
 * or types.
 *
 * ```js
 * const { argon2Sync, randomBytes } = await import('node:crypto');
 *
 * const parameters = {
 *   message: 'password',
 *   nonce: randomBytes(16),
 *   parallelism: 4,
 *   tagLength: 64,
 *   memory: 65536,
 *   passes: 3,
 * };
 *
 * const derivedKey = argon2Sync('argon2id', parameters);
 * console.log(derivedKey.toString('hex'));  // 'af91dad...9520f15'
 * ```
 * @since v24.7.0
 * @experimental
 */
external fun argon2Sync(
    algorithm: Argon2Algorithm,
    parameters: Argon2Parameters,
): node.buffer.Buffer<*>
