// Generated by Karakum - do not modify it manually!

package node.http2

import node.http.IncomingMessage
import node.http.ServerResponse

@Suppress("INTERFACE_WITH_SUPERCLASS")
sealed external interface Http2SecureServer<Http1Request : IncomingMessage, Http1Response : ServerResponse<*>, Http2Request : Http2ServerRequest, Http2Response : Http2ServerResponse<*>> :
    node.tls.Server, HTTP2ServerCommon {


    override fun addListener(event: String, listener: Function<Unit> /* (...args: any[]) => void */): Unit /* this */

    fun addListener(event: js.symbol.Symbol, listener: Function<Unit> /* (...args: any[]) => void */): Unit /* this */


    override fun emit(event: String, vararg args: Any?): Boolean

    override fun emit(event: js.symbol.Symbol, vararg args: Any?): Boolean


    override fun on(event: String, listener: Function<Unit> /* (...args: any[]) => void */): Unit /* this */

    fun on(event: js.symbol.Symbol, listener: Function<Unit> /* (...args: any[]) => void */): Unit /* this */


    override fun once(event: String, listener: Function<Unit> /* (...args: any[]) => void */): Unit /* this */

    fun once(event: js.symbol.Symbol, listener: Function<Unit> /* (...args: any[]) => void */): Unit /* this */


    override fun prependListener(
        event: String,
        listener: Function<Unit>, /* (...args: any[]) => void */
    ): Unit /* this */

    fun prependListener(
        event: js.symbol.Symbol,
        listener: Function<Unit>, /* (...args: any[]) => void */
    ): Unit /* this */


    override fun prependOnceListener(
        event: String,
        listener: Function<Unit>, /* (...args: any[]) => void */
    ): Unit /* this */

    fun prependOnceListener(
        event: js.symbol.Symbol,
        listener: Function<Unit>, /* (...args: any[]) => void */
    ): Unit /* this */

    @web.events.JsEvent("checkContinue")
    val checkContinueEvent: node.events.EventInstance<js.array.JsTuple2<Http2Request, Http2Response>>

    @web.events.JsEvent("request")
    val requestEvent: node.events.EventInstance<js.array.JsTuple2<Http2Request, Http2Response>>

    @web.events.JsEvent("session")
    val sessionEvent: node.events.EventInstance<js.array.JsTuple1<ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>>>

    @web.events.JsEvent("sessionError")
    val sessionErrorEvent: node.events.EventInstance<js.array.JsTuple1<js.errors.JsError>>

    @web.events.JsEvent("stream")
    val streamEvent: node.events.EventInstance<js.array.JsTuple3<ServerHttp2Stream, IncomingHttpHeaders, Double>>

    @web.events.JsEvent("timeout")
    val timeoutEvent: node.events.EventInstance<js.array.JsTuple>

    @web.events.JsEvent("unknownProtocol")
    val unknownProtocolEvent: node.events.EventInstance<js.array.JsTuple1<node.tls.TLSSocket>>
}
