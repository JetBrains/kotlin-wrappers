// Generated by Karakum - do not modify it manually!

@file:JsModule("node:perf_hooks")

package node.perfHooks

import node.asyncHooks.AsyncResource

/**
 * @since v8.5.0
 */
external class PerformanceObserver : AsyncResource {
    constructor (callback: PerformanceObserverCallback)

    /**
     * Disconnects the `PerformanceObserver` instance from all notifications.
     * @since v8.5.0
     */
    fun disconnect()

    /**
     * Subscribes the `PerformanceObserver` instance to notifications of new `PerformanceEntry` instances identified either by `options.entryTypes` or `options.type`:
     *
     * ```js
     * import {
     *   performance,
     *   PerformanceObserver,
     * } from 'node:perf_hooks';
     *
     * const obs = new PerformanceObserver((list, observer) => {
     *   // Called once asynchronously. `list` contains three items.
     * });
     * obs.observe({ type: 'mark' });
     *
     * for (let n = 0; n < 3; n++)
     *   performance.mark(`test${n}`);
     * ```
     * @since v8.5.0
     */
    fun observe(options: PerformanceObserverObserveTypesOptions)

    /**
     * Subscribes the `PerformanceObserver` instance to notifications of new `PerformanceEntry` instances identified either by `options.entryTypes` or `options.type`:
     *
     * ```js
     * import {
     *   performance,
     *   PerformanceObserver,
     * } from 'node:perf_hooks';
     *
     * const obs = new PerformanceObserver((list, observer) => {
     *   // Called once asynchronously. `list` contains three items.
     * });
     * obs.observe({ type: 'mark' });
     *
     * for (let n = 0; n < 3; n++)
     *   performance.mark(`test${n}`);
     * ```
     * @since v8.5.0
     */
    fun observe(options: PerformanceObserverObserveTypeOptions)

    /**
     * @since v16.0.0
     * @returns Current list of entries stored in the performance observer, emptying it out.
     */
    fun takeRecords(): js.array.ReadonlyArray<PerformanceEntry>
}
