// Generated by Karakum - do not modify it manually!

package node.net


sealed external interface ServerEvent {
    sealed interface CLOSE : node.events.LegacyEventType
    sealed interface CONNECTION : node.events.LegacyEventType
    sealed interface ERROR : node.events.LegacyEventType
    sealed interface LISTENING : node.events.LegacyEventType
    sealed interface DROP : node.events.LegacyEventType

    companion object {
        @seskar.js.JsValue("close")
        val CLOSE: CLOSE

        @seskar.js.JsValue("connection")
        val CONNECTION: CONNECTION

        @seskar.js.JsValue("error")
        val ERROR: ERROR

        @seskar.js.JsValue("listening")
        val LISTENING: LISTENING

        @seskar.js.JsValue("drop")
        val DROP: DROP

        @seskar.js.JsValue("close")
        fun close(): node.events.EventType<Server, js.array.JsTuple>

        @seskar.js.JsValue("connection")
        fun connection(): node.events.EventType<Server, js.array.JsTuple1<Socket>>

        @seskar.js.JsValue("error")
        fun error(): node.events.EventType<Server, js.array.JsTuple1<Throwable /* JsError */>>

        @seskar.js.JsValue("listening")
        fun listening(): node.events.EventType<Server, js.array.JsTuple>

        @seskar.js.JsValue("drop")
        fun drop(): node.events.EventType<Server, js.array.JsTuple1<DropArgument>>
    }
}
