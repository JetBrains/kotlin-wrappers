// Generated by Karakum - do not modify it manually!

@file:JsModule("node:dns/promises")

package node.dns

import js.promise.Promise

/**
 * An independent resolver for DNS requests.
 *
 * Creating a new resolver uses the default server settings. Setting
 * the servers used for a resolver using [`resolver.setServers()`](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromisessetserversservers) does not affect
 * other resolvers:
 *
 * ```js
 * const { Resolver } = require('node:dns').promises;
 * const resolver = new Resolver();
 * resolver.setServers(['4.4.4.4']);
 *
 * // This request will use the server at 4.4.4.4, independent of global settings.
 * resolver.resolve4('example.org').then((addresses) => {
 *   // ...
 * });
 *
 * // Alternatively, the same code can be written using async-await style.
 * (async function() {
 *   const addresses = await resolver.resolve4('example.org');
 * })();
 * ```
 *
 * The following methods from the `dnsPromises` API are available:
 *
 * * `resolver.getServers()`
 * * `resolver.resolve()`
 * * `resolver.resolve4()`
 * * `resolver.resolve6()`
 * * `resolver.resolveAny()`
 * * `resolver.resolveCaa()`
 * * `resolver.resolveCname()`
 * * `resolver.resolveMx()`
 * * `resolver.resolveNaptr()`
 * * `resolver.resolveNs()`
 * * `resolver.resolvePtr()`
 * * `resolver.resolveSoa()`
 * * `resolver.resolveSrv()`
 * * `resolver.resolveTxt()`
 * * `resolver.reverse()`
 * * `resolver.setServers()`
 * @since v10.6.0
 */
external class Resolver {
    constructor (options: ResolverOptions = definedExternally)

    /**
     * Cancel all outstanding DNS queries made by this resolver. The corresponding
     * callbacks will be called with an error with code `ECANCELLED`.
     * @since v8.3.0
     */
    fun cancel(): Unit
    var getServers: () -> js.array.ReadonlyArray<String>

    @JsName("resolve")
    fun resolveAsync(hostname: String): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String): js.array.ReadonlyArray<String>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.A): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.A): js.array.ReadonlyArray<String>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.AAAA): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.AAAA): js.array.ReadonlyArray<String>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.ANY): Promise<js.array.ReadonlyArray<AnyRecord>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.ANY): js.array.ReadonlyArray<AnyRecord>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.CAA): Promise<js.array.ReadonlyArray<CaaRecord>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.CAA): js.array.ReadonlyArray<CaaRecord>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.CNAME): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.CNAME): js.array.ReadonlyArray<String>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.MX): Promise<js.array.ReadonlyArray<MxRecord>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.MX): js.array.ReadonlyArray<MxRecord>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.NAPTR): Promise<js.array.ReadonlyArray<NaptrRecord>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.NAPTR): js.array.ReadonlyArray<NaptrRecord>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.NS): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.NS): js.array.ReadonlyArray<String>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.PTR): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.PTR): js.array.ReadonlyArray<String>


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.SOA): Promise<SoaRecord>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.SOA): SoaRecord


    @JsName("resolve")
    fun resolveAsync(hostname: String, rrtype: ResourceRecordType.SRV): Promise<js.array.ReadonlyArray<SrvRecord>>


    @seskar.js.JsAsync
    suspend fun resolve(hostname: String, rrtype: ResourceRecordType.SRV): js.array.ReadonlyArray<SrvRecord>


    @JsName("resolve")
    fun resolveAsync(
        hostname: String,
        rrtype: ResourceRecordType.TXT,
    ): Promise<js.array.ReadonlyArray<js.array.ReadonlyArray<String>>>


    @seskar.js.JsAsync
    suspend fun resolve(
        hostname: String,
        rrtype: ResourceRecordType.TXT,
    ): js.array.ReadonlyArray<js.array.ReadonlyArray<String>>


    @JsName("resolve")
    fun resolveAsync(
        hostname: String,
        rrtype: String,
    ): Promise<Any /* string[] | SoaRecord | MxRecord[] | NaptrRecord[] | SrvRecord[] | string[][] | AnyRecord[] */>


    @seskar.js.JsAsync
    suspend fun resolve(
        hostname: String,
        rrtype: String,
    ): Any /* string[] | SoaRecord | MxRecord[] | NaptrRecord[] | SrvRecord[] | string[][] | AnyRecord[] */


    @JsName("resolve4")
    fun resolve4Async(hostname: String): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolve4(hostname: String): js.array.ReadonlyArray<String>


    @JsName("resolve4")
    fun resolve4Async(hostname: String, options: ResolveWithTtlOptions): Promise<js.array.ReadonlyArray<RecordWithTtl>>


    @seskar.js.JsAsync
    suspend fun resolve4(hostname: String, options: ResolveWithTtlOptions): js.array.ReadonlyArray<RecordWithTtl>


    @JsName("resolve4")
    fun resolve4Async(hostname: String, options: ResolveOptions): Promise<Any /* string[] | RecordWithTtl[] */>


    @seskar.js.JsAsync
    suspend fun resolve4(hostname: String, options: ResolveOptions): Any /* string[] | RecordWithTtl[] */


    @JsName("resolve6")
    fun resolve6Async(hostname: String): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolve6(hostname: String): js.array.ReadonlyArray<String>


    @JsName("resolve6")
    fun resolve6Async(hostname: String, options: ResolveWithTtlOptions): Promise<js.array.ReadonlyArray<RecordWithTtl>>


    @seskar.js.JsAsync
    suspend fun resolve6(hostname: String, options: ResolveWithTtlOptions): js.array.ReadonlyArray<RecordWithTtl>


    @JsName("resolve6")
    fun resolve6Async(hostname: String, options: ResolveOptions): Promise<Any /* string[] | RecordWithTtl[] */>


    @seskar.js.JsAsync
    suspend fun resolve6(hostname: String, options: ResolveOptions): Any /* string[] | RecordWithTtl[] */


    @JsName("resolveAny")
    fun resolveAnyAsync(hostname: String): Promise<js.array.ReadonlyArray<AnyRecord>>


    @seskar.js.JsAsync
    suspend fun resolveAny(hostname: String): js.array.ReadonlyArray<AnyRecord>


    @JsName("resolveCaa")
    fun resolveCaaAsync(hostname: String): Promise<js.array.ReadonlyArray<CaaRecord>>


    @seskar.js.JsAsync
    suspend fun resolveCaa(hostname: String): js.array.ReadonlyArray<CaaRecord>


    @JsName("resolveCname")
    fun resolveCnameAsync(hostname: String): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolveCname(hostname: String): js.array.ReadonlyArray<String>


    @JsName("resolveMx")
    fun resolveMxAsync(hostname: String): Promise<js.array.ReadonlyArray<MxRecord>>


    @seskar.js.JsAsync
    suspend fun resolveMx(hostname: String): js.array.ReadonlyArray<MxRecord>


    @JsName("resolveNaptr")
    fun resolveNaptrAsync(hostname: String): Promise<js.array.ReadonlyArray<NaptrRecord>>


    @seskar.js.JsAsync
    suspend fun resolveNaptr(hostname: String): js.array.ReadonlyArray<NaptrRecord>


    @JsName("resolveNs")
    fun resolveNsAsync(hostname: String): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolveNs(hostname: String): js.array.ReadonlyArray<String>


    @JsName("resolvePtr")
    fun resolvePtrAsync(hostname: String): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun resolvePtr(hostname: String): js.array.ReadonlyArray<String>


    @JsName("resolveSoa")
    fun resolveSoaAsync(hostname: String): Promise<SoaRecord>


    @seskar.js.JsAsync
    suspend fun resolveSoa(hostname: String): SoaRecord


    @JsName("resolveSrv")
    fun resolveSrvAsync(hostname: String): Promise<js.array.ReadonlyArray<SrvRecord>>


    @seskar.js.JsAsync
    suspend fun resolveSrv(hostname: String): js.array.ReadonlyArray<SrvRecord>


    @JsName("resolveTxt")
    fun resolveTxtAsync(hostname: String): Promise<js.array.ReadonlyArray<js.array.ReadonlyArray<String>>>


    @seskar.js.JsAsync
    suspend fun resolveTxt(hostname: String): js.array.ReadonlyArray<js.array.ReadonlyArray<String>>


    @JsName("reverse")
    fun reverseAsync(ip: String): Promise<js.array.ReadonlyArray<String>>


    @seskar.js.JsAsync
    suspend fun reverse(ip: String): js.array.ReadonlyArray<String>

    /**
     * The resolver instance will send its requests from the specified IP address.
     * This allows programs to specify outbound interfaces when used on multi-homed
     * systems.
     *
     * If a v4 or v6 address is not specified, it is set to the default and the
     * operating system will choose a local address automatically.
     *
     * The resolver will use the v4 local address when making requests to IPv4 DNS
     * servers, and the v6 local address when making requests to IPv6 DNS servers.
     * The `rrtype` of resolution requests has no impact on the local address used.
     * @since v15.1.0, v14.17.0
     * @param [ipv4='0.0.0.0'] A string representation of an IPv4 address.
     * @param [ipv6='::0'] A string representation of an IPv6 address.
     */
    fun setLocalAddress(ipv4: String = definedExternally, ipv6: String = definedExternally): Unit
    var setServers: (servers: js.array.ReadonlyArray<String>) -> Unit
}
