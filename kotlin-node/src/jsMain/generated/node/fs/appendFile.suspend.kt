// Generated by Karakum - do not modify it manually!

package node.fs

import js.core.Void
import js.typedarrays.Uint8Array


suspend fun appendFile(path: PathLike, data: String): Void =
    appendFileAsync(
        path, data
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(
    path: PathLike,
    data: String,
    options: (AppendFileAsyncOptions)? = undefined.unsafeCast<Nothing>(),
): Void =
    appendFileAsync(
        path, data, options
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(
    path: PathLike,
    data: String,
    options: node.buffer.BufferEncoding? = undefined.unsafeCast<Nothing>(),
): Void =
    appendFileAsync(
        path, data, options
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(path: PathLike, data: Uint8Array): Void =
    appendFileAsync(
        path, data
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(
    path: PathLike,
    data: Uint8Array,
    options: (AppendFileAsyncOptions)? = undefined.unsafeCast<Nothing>(),
): Void =
    appendFileAsync(
        path, data, options
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(
    path: PathLike,
    data: Uint8Array,
    options: node.buffer.BufferEncoding? = undefined.unsafeCast<Nothing>(),
): Void =
    appendFileAsync(
        path, data, options
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(path: FileHandle, data: String): Void =
    appendFileAsync(
        path, data
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(
    path: FileHandle,
    data: String,
    options: (AppendFileAsyncOptions)? = undefined.unsafeCast<Nothing>(),
): Void =
    appendFileAsync(
        path, data, options
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(
    path: FileHandle,
    data: String,
    options: node.buffer.BufferEncoding? = undefined.unsafeCast<Nothing>(),
): Void =
    appendFileAsync(
        path, data, options
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(path: FileHandle, data: Uint8Array): Void =
    appendFileAsync(
        path, data
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(
    path: FileHandle,
    data: Uint8Array,
    options: (AppendFileAsyncOptions)? = undefined.unsafeCast<Nothing>(),
): Void =
    appendFileAsync(
        path, data, options
    ).await()


/**
 * Asynchronously append data to a file, creating the file if it does not yet
 * exist. `data` can be a string or a `Buffer`.
 *
 * If `options` is a string, then it specifies the `encoding`.
 *
 * The `mode` option only affects the newly created file. See `fs.open()` for more details.
 *
 * The `path` may be specified as a `FileHandle` that has been opened
 * for appending (using `fsPromises.open()`).
 * @since v10.0.0
 * @param path filename or {FileHandle}
 * @return Fulfills with `undefined` upon success.
 */

suspend fun appendFile(
    path: FileHandle,
    data: Uint8Array,
    options: node.buffer.BufferEncoding? = undefined.unsafeCast<Nothing>(),
): Void =
    appendFileAsync(
        path, data, options
    ).await()
