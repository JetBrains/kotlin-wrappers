// Generated by Karakum - do not modify it manually!

package node.childProcess


sealed external interface ChildProcessEvent {
    sealed interface CLOSE : node.events.LegacyEventType
    sealed interface DISCONNECT : node.events.LegacyEventType
    sealed interface ERROR : node.events.LegacyEventType
    sealed interface EXIT : node.events.LegacyEventType
    sealed interface MESSAGE : node.events.LegacyEventType
    sealed interface SPAWN : node.events.LegacyEventType

    companion object {
        @seskar.js.JsValue("close")
        val CLOSE: CLOSE

        @seskar.js.JsValue("disconnect")
        val DISCONNECT: DISCONNECT

        @seskar.js.JsValue("error")
        val ERROR: ERROR

        @seskar.js.JsValue("exit")
        val EXIT: EXIT

        @seskar.js.JsValue("message")
        val MESSAGE: MESSAGE

        @seskar.js.JsValue("spawn")
        val SPAWN: SPAWN

        @seskar.js.JsValue("close")
        fun close(): node.events.EventType<ChildProcess, js.array.JsTuple2<Double?, node.process.Signals?>>

        @seskar.js.JsValue("disconnect")
        fun disconnect(): node.events.EventType<ChildProcess, js.array.JsTuple>

        @seskar.js.JsValue("error")
        fun error(): node.events.EventType<ChildProcess, js.array.JsTuple1<Throwable /* JsError */>>

        @seskar.js.JsValue("exit")
        fun exit(): node.events.EventType<ChildProcess, js.array.JsTuple2<Double?, node.process.Signals?>>

        @seskar.js.JsValue("message")
        fun message(): node.events.EventType<ChildProcess, js.array.JsTuple2<Serializable, SendHandle>>

        @seskar.js.JsValue("spawn")
        fun spawn(): node.events.EventType<ChildProcess, js.array.JsTuple>
    }
}
