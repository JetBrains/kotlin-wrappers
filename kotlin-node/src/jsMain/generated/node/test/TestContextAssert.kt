// Generated by Karakum - do not modify it manually!

package node.test

sealed external interface TestContextAssert {
    /**
     * Identical to the `deepEqual` function from the `node:assert` module, but bound to the test context.
     */
    var deepEqual: js.function.JsFunction<*, *> /* typeof import("node:assert").deepEqual */

    /**
     * Identical to the `deepStrictEqual` function from the `node:assert` module, but bound to the test context.
     *
     * **Note:** as this method returns a type assertion, the context parameter in the callback signature must have a
     * type annotation, otherwise an error will be raised by the TypeScript compiler:
     * ```ts
     * import { test, type TestContext } from 'node:test';
     *
     * // The test function's context parameter must have a type annotation.
     * test('example', (t: TestContext) => {
     *   t.assert.deepStrictEqual(actual, expected);
     * });
     *
     * // Omitting the type annotation will result in a compilation error.
     * test('example', t => {
     *   t.assert.deepStrictEqual(actual, expected); // Error: 't' needs an explicit type annotation.
     * });
     * ```
     */
    var deepStrictEqual: js.function.JsFunction<*, *> /* typeof import("node:assert").deepStrictEqual */

    /**
     * Identical to the `doesNotMatch` function from the `node:assert` module, but bound to the test context.
     */
    var doesNotMatch: js.function.JsFunction<*, *> /* typeof import("node:assert").doesNotMatch */

    /**
     * Identical to the `doesNotReject` function from the `node:assert` module, but bound to the test context.
     */
    var doesNotReject: js.function.JsFunction<*, *> /* typeof import("node:assert").doesNotReject */

    /**
     * Identical to the `doesNotThrow` function from the `node:assert` module, but bound to the test context.
     */
    var doesNotThrow: js.function.JsFunction<*, *> /* typeof import("node:assert").doesNotThrow */

    /**
     * Identical to the `equal` function from the `node:assert` module, but bound to the test context.
     */
    var equal: js.function.JsFunction<*, *> /* typeof import("node:assert").equal */

    /**
     * Identical to the `fail` function from the `node:assert` module, but bound to the test context.
     */
    var fail: js.function.JsFunction<*, *> /* typeof import("node:assert").fail */

    /**
     * Identical to the `ifError` function from the `node:assert` module, but bound to the test context.
     *
     * **Note:** as this method returns a type assertion, the context parameter in the callback signature must have a
     * type annotation, otherwise an error will be raised by the TypeScript compiler:
     * ```ts
     * import { test, type TestContext } from 'node:test';
     *
     * // The test function's context parameter must have a type annotation.
     * test('example', (t: TestContext) => {
     *   t.assert.ifError(err);
     * });
     *
     * // Omitting the type annotation will result in a compilation error.
     * test('example', t => {
     *   t.assert.ifError(err); // Error: 't' needs an explicit type annotation.
     * });
     * ```
     */
    var ifError: js.function.JsFunction<*, *> /* typeof import("node:assert").ifError */

    /**
     * Identical to the `match` function from the `node:assert` module, but bound to the test context.
     */
    var match: js.function.JsFunction<*, *> /* typeof import("node:assert").match */

    /**
     * Identical to the `notDeepEqual` function from the `node:assert` module, but bound to the test context.
     */
    var notDeepEqual: js.function.JsFunction<*, *> /* typeof import("node:assert").notDeepEqual */

    /**
     * Identical to the `notDeepStrictEqual` function from the `node:assert` module, but bound to the test context.
     */
    var notDeepStrictEqual: js.function.JsFunction<*, *> /* typeof import("node:assert").notDeepStrictEqual */

    /**
     * Identical to the `notEqual` function from the `node:assert` module, but bound to the test context.
     */
    var notEqual: js.function.JsFunction<*, *> /* typeof import("node:assert").notEqual */

    /**
     * Identical to the `notStrictEqual` function from the `node:assert` module, but bound to the test context.
     */
    var notStrictEqual: js.function.JsFunction<*, *> /* typeof import("node:assert").notStrictEqual */

    /**
     * Identical to the `ok` function from the `node:assert` module, but bound to the test context.
     *
     * **Note:** as this method returns a type assertion, the context parameter in the callback signature must have a
     * type annotation, otherwise an error will be raised by the TypeScript compiler:
     * ```ts
     * import { test, type TestContext } from 'node:test';
     *
     * // The test function's context parameter must have a type annotation.
     * test('example', (t: TestContext) => {
     *   t.assert.ok(condition);
     * });
     *
     * // Omitting the type annotation will result in a compilation error.
     * test('example', t => {
     *   t.assert.ok(condition)); // Error: 't' needs an explicit type annotation.
     * });
     * ```
     */
    var ok: js.function.JsFunction<*, *> /* typeof import("node:assert").ok */

    /**
     * Identical to the `rejects` function from the `node:assert` module, but bound to the test context.
     */
    var rejects: js.function.JsFunction<*, *> /* typeof import("node:assert").rejects */

    /**
     * Identical to the `strictEqual` function from the `node:assert` module, but bound to the test context.
     *
     * **Note:** as this method returns a type assertion, the context parameter in the callback signature must have a
     * type annotation, otherwise an error will be raised by the TypeScript compiler:
     * ```ts
     * import { test, type TestContext } from 'node:test';
     *
     * // The test function's context parameter must have a type annotation.
     * test('example', (t: TestContext) => {
     *   t.assert.strictEqual(actual, expected);
     * });
     *
     * // Omitting the type annotation will result in a compilation error.
     * test('example', t => {
     *   t.assert.strictEqual(actual, expected); // Error: 't' needs an explicit type annotation.
     * });
     * ```
     */
    var strictEqual: js.function.JsFunction<*, *> /* typeof import("node:assert").strictEqual */

    /**
     * Identical to the `throws` function from the `node:assert` module, but bound to the test context.
     */
    var throws: js.function.JsFunction<*, *> /* typeof import("node:assert").throws */

    /**
     * This function implements assertions for snapshot testing.
     * ```js
     * test('snapshot test with default serialization', (t) => {
     *   t.assert.snapshot({ value1: 1, value2: 2 });
     * });
     *
     * test('snapshot test with custom serialization', (t) => {
     *   t.assert.snapshot({ value3: 3, value4: 4 }, {
     *     serializers: [(value) => JSON.stringify(value)]
     *   });
     * });
     * ```
     * @since v22.3.0
     */
    fun snapshot(value: Any?, options: AssertSnapshotOptions = definedExternally): Unit
}
