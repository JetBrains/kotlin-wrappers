// Generated by Karakum - do not modify it manually!

package node.test

import web.abort.AbortSignal

sealed external interface RunOptions {
    /**
     * If a number is provided, then that many test processes would run in parallel, where each process corresponds to one test file.
     * If `true`, it would run `os.availableParallelism() - 1` test files in parallel. If `false`, it would only run one test file at a time.
     * @default false
     */
    var concurrency: Any? /* number | boolean | undefined */

    /**
     * An array containing the list of files to run. **Default** matching files from
     * [test runner execution model](https://nodejs.org/docs/latest-v20.x/api/test.html#test-runner-execution-model).
     */
    var files: (js.array.ReadonlyArray<String>)?

    /**
     * Configures the test runner to exit the process once all known
     * tests have finished executing even if the event loop would
     * otherwise remain active.
     * @default false
     */
    var forceExit: Boolean?

    /**
     * Sets inspector port of test child process.
     * If a nullish value is provided, each process gets its own port,
     * incremented from the primary's `process.debugPort`.
     * @default undefined
     */
    var inspectPort: Any? /* number | (() => number) | undefined */

    /**
     * If truthy, the test context will only run tests that have the `only` option set
     */
    var only: Boolean?

    /**
     * A function that accepts the `TestsStream` instance and can be used to setup listeners before any tests are run.
     * @default undefined
     */
    var setup: ((root: Test) -> js.promise.PromiseResult<Unit>)?

    /**
     * Allows aborting an in-progress test execution.
     */
    var signal: AbortSignal?

    /**
     * A String, RegExp or a RegExp Array, that can be used to only run tests whose
     * name matches the provided pattern. Test name patterns are interpreted as JavaScript
     * regular expressions. For each test that is executed, any corresponding test hooks,
     * such as `beforeEach()`, are also run.
     * @default undefined
     */
    var testNamePatterns: (Any /* string | RegExp | string[] | RegExp[] */)?

    /**
     * A number of milliseconds the test execution will fail after.
     * If unspecified, subtests inherit this value from their parent.
     * @default Infinity
     */
    var timeout: Double?

    /**
     * Whether to run in watch mode or not.
     * @default false
     */
    var watch: Boolean?

    /**
     * Running tests in a specific shard.
     * @default undefined
     */
    var shard: TestShard?
}
