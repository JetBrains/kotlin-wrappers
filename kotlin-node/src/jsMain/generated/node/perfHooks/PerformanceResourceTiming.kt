// Generated by Karakum - do not modify it manually!

@file:JsModule("node:perf_hooks")

package node.perfHooks

/**
 * Provides detailed network timing data regarding the loading of an application's resources.
 *
 * The constructor of this class is not exposed to users directly.
 * @since v18.2.0, v16.17.0
 */
external class PerformanceResourceTiming : PerformanceEntry {
    constructor ()

    /**
     * The high resolution millisecond timestamp at immediately before dispatching the `fetch`
     * request. If the resource is not intercepted by a worker the property will always return 0.
     * @since v18.2.0, v16.17.0
     */
    val workerStart: Double

    /**
     * The high resolution millisecond timestamp that represents the start time of the fetch which
     * initiates the redirect.
     * @since v18.2.0, v16.17.0
     */
    val redirectStart: Double

    /**
     * The high resolution millisecond timestamp that will be created immediately after receiving
     * the last byte of the response of the last redirect.
     * @since v18.2.0, v16.17.0
     */
    val redirectEnd: Double

    /**
     * The high resolution millisecond timestamp immediately before the Node.js starts to fetch the resource.
     * @since v18.2.0, v16.17.0
     */
    val fetchStart: Double

    /**
     * The high resolution millisecond timestamp immediately before the Node.js starts the domain name lookup
     * for the resource.
     * @since v18.2.0, v16.17.0
     */
    val domainLookupStart: Double

    /**
     * The high resolution millisecond timestamp representing the time immediately after the Node.js finished
     * the domain name lookup for the resource.
     * @since v18.2.0, v16.17.0
     */
    val domainLookupEnd: Double

    /**
     * The high resolution millisecond timestamp representing the time immediately before Node.js starts to
     * establish the connection to the server to retrieve the resource.
     * @since v18.2.0, v16.17.0
     */
    val connectStart: Double

    /**
     * The high resolution millisecond timestamp representing the time immediately after Node.js finishes
     * establishing the connection to the server to retrieve the resource.
     * @since v18.2.0, v16.17.0
     */
    val connectEnd: Double

    /**
     * The high resolution millisecond timestamp representing the time immediately before Node.js starts the
     * handshake process to secure the current connection.
     * @since v18.2.0, v16.17.0
     */
    val secureConnectionStart: Double

    /**
     * The high resolution millisecond timestamp representing the time immediately before Node.js receives the
     * first byte of the response from the server.
     * @since v18.2.0, v16.17.0
     */
    val requestStart: Double

    /**
     * The high resolution millisecond timestamp representing the time immediately after Node.js receives the
     * last byte of the resource or immediately before the transport connection is closed, whichever comes first.
     * @since v18.2.0, v16.17.0
     */
    val responseEnd: Double

    /**
     * A number representing the size (in octets) of the fetched resource. The size includes the response header
     * fields plus the response payload body.
     * @since v18.2.0, v16.17.0
     */
    val transferSize: Double

    /**
     * A number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before
     * removing any applied content-codings.
     * @since v18.2.0, v16.17.0
     */
    val encodedBodySize: Double

    /**
     * A number representing the size (in octets) received from the fetch (HTTP or cache), of the message body, after
     * removing any applied content-codings.
     * @since v18.2.0, v16.17.0
     */
    val decodedBodySize: Double

    /**
     * Returns a `object` that is the JSON representation of the `PerformanceResourceTiming` object
     * @since v18.2.0, v16.17.0
     */
    override fun toJSON(): Any?
}
