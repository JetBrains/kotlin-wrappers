// Generated by Karakum - do not modify it manually!

package node.cluster


sealed external interface ClusterEvent {
    sealed interface DISCONNECT : node.events.LegacyEventType
    sealed interface EXIT : node.events.LegacyEventType
    sealed interface FORK : node.events.LegacyEventType
    sealed interface LISTENING : node.events.LegacyEventType
    sealed interface MESSAGE : node.events.LegacyEventType
    sealed interface ONLINE : node.events.LegacyEventType
    sealed interface SETUP : node.events.LegacyEventType

    companion object {
        @seskar.js.JsValue("disconnect")
        val DISCONNECT: DISCONNECT

        @seskar.js.JsValue("exit")
        val EXIT: EXIT

        @seskar.js.JsValue("fork")
        val FORK: FORK

        @seskar.js.JsValue("listening")
        val LISTENING: LISTENING

        @seskar.js.JsValue("message")
        val MESSAGE: MESSAGE

        @seskar.js.JsValue("online")
        val ONLINE: ONLINE

        @seskar.js.JsValue("setup")
        val SETUP: SETUP

        @seskar.js.JsValue("disconnect")
        fun disconnect(): node.events.EventType<Cluster, js.array.JsTuple1<Worker>>

        @seskar.js.JsValue("exit")
        fun exit(): node.events.EventType<Cluster, js.array.JsTuple3<Worker, Double, String>>

        @seskar.js.JsValue("fork")
        fun fork(): node.events.EventType<Cluster, js.array.JsTuple1<Worker>>

        @seskar.js.JsValue("listening")
        fun listening(): node.events.EventType<Cluster, js.array.JsTuple2<Worker, Address>>

        @seskar.js.JsValue("message")
        fun message(): node.events.EventType<Cluster, js.array.JsTuple3<Worker, Any?, Any /* net.Socket | net.Server */>>

        @seskar.js.JsValue("online")
        fun online(): node.events.EventType<Cluster, js.array.JsTuple1<Worker>>

        @seskar.js.JsValue("setup")
        fun setup(): node.events.EventType<Cluster, js.array.JsTuple1<ClusterSettings>>
    }
}
