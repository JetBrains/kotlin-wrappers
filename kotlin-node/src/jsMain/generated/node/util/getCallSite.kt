// Generated by Karakum - do not modify it manually!

@file:JsModule("node:util")

package node.util

/**
 * Returns an array of stacktrace objects containing the stack of
 * the caller function.
 *
 * ```js
 * const util = require('node:util');
 *
 * function exampleFunction() {
 *   const callSites = util.getCallSite();
 *
 *   console.log('Call Sites:');
 *   callSites.forEach((callSite, index) => {
 *     console.log(`CallSite ${index + 1}:`);
 *     console.log(`Function Name: ${callSite.functionName}`);
 *     console.log(`Script Name: ${callSite.scriptName}`);
 *     console.log(`Line Number: ${callSite.lineNumber}`);
 *     console.log(`Column Number: ${callSite.column}`);
 *   });
 *   // CallSite 1:
 *   // Function Name: exampleFunction
 *   // Script Name: /home/example.js
 *   // Line Number: 5
 *   // Column Number: 26
 *
 *   // CallSite 2:
 *   // Function Name: anotherFunction
 *   // Script Name: /home/example.js
 *   // Line Number: 22
 *   // Column Number: 3
 *
 *   // ...
 * }
 *
 * // A function to simulate another stack layer
 * function anotherFunction() {
 *   exampleFunction();
 * }
 *
 * anotherFunction();
 * ```
 * @param frames Number of frames returned in the stacktrace.
 * **Default:** `10`. Allowable range is between 1 and 200.
 * @return An array of stacktrace objects
 * @since v22.9.0
 */
external fun getCallSite(frames: Number = definedExternally): js.array.ReadonlyArray<StacktraceObject>
