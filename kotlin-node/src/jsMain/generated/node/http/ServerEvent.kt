// Generated by Karakum - do not modify it manually!

package node.http

import node.net.Socket


sealed external interface ServerEvent {
    sealed interface CLOSE : node.events.LegacyEventType
    sealed interface CONNECTION : node.events.LegacyEventType
    sealed interface ERROR : node.events.LegacyEventType
    sealed interface LISTENING : node.events.LegacyEventType
    sealed interface CHECKCONTINUE : node.events.LegacyEventType
    sealed interface CHECKEXPECTATION : node.events.LegacyEventType
    sealed interface CLIENTERROR : node.events.LegacyEventType
    sealed interface CONNECT : node.events.LegacyEventType
    sealed interface DROPREQUEST : node.events.LegacyEventType
    sealed interface REQUEST : node.events.LegacyEventType
    sealed interface UPGRADE : node.events.LegacyEventType

    companion object {
        @seskar.js.JsValue("close")
        val CLOSE: CLOSE

        @seskar.js.JsValue("connection")
        val CONNECTION: CONNECTION

        @seskar.js.JsValue("error")
        val ERROR: ERROR

        @seskar.js.JsValue("listening")
        val LISTENING: LISTENING

        @seskar.js.JsValue("checkContinue")
        val CHECKCONTINUE: CHECKCONTINUE

        @seskar.js.JsValue("checkExpectation")
        val CHECKEXPECTATION: CHECKEXPECTATION

        @seskar.js.JsValue("clientError")
        val CLIENTERROR: CLIENTERROR

        @seskar.js.JsValue("connect")
        val CONNECT: CONNECT

        @seskar.js.JsValue("dropRequest")
        val DROPREQUEST: DROPREQUEST

        @seskar.js.JsValue("request")
        val REQUEST: REQUEST

        @seskar.js.JsValue("upgrade")
        val UPGRADE: UPGRADE

        @seskar.js.JsValue("close")
        fun close(): node.events.EventType<Server<*, *>, js.array.JsTuple>

        @seskar.js.JsValue("connection")
        fun connection(): node.events.EventType<Server<*, *>, js.array.JsTuple1<Socket>>

        @seskar.js.JsValue("error")
        fun error(): node.events.EventType<Server<*, *>, js.array.JsTuple1<Throwable /* JsError */>>

        @seskar.js.JsValue("listening")
        fun listening(): node.events.EventType<Server<*, *>, js.array.JsTuple>

        @seskar.js.JsValue("checkContinue")
        fun <Request : IncomingMessage, Response : ServerResponse<*>> checkContinue(): node.events.EventType<Server<Request, Response>, js.array.JsTuple2<Request, Response>>

        @seskar.js.JsValue("checkExpectation")
        fun <Request : IncomingMessage, Response : ServerResponse<*>> checkExpectation(): node.events.EventType<Server<Request, Response>, js.array.JsTuple2<Request, Response>>

        @seskar.js.JsValue("clientError")
        fun clientError(): node.events.EventType<Server<*, *>, js.array.JsTuple2<Throwable /* JsError */, node.stream.Duplex>>

        @seskar.js.JsValue("connect")
        fun <Request : IncomingMessage> connect(): node.events.EventType<Server<Request, *>, js.array.JsTuple3<Request, node.stream.Duplex, node.buffer.Buffer>>

        @seskar.js.JsValue("dropRequest")
        fun <Request : IncomingMessage> dropRequest(): node.events.EventType<Server<Request, *>, js.array.JsTuple2<Request, node.stream.Duplex>>

        @seskar.js.JsValue("request")
        fun <Request : IncomingMessage, Response : ServerResponse<*>> request(): node.events.EventType<Server<Request, Response>, js.array.JsTuple2<Request, Response>>

        @seskar.js.JsValue("upgrade")
        fun <Request : IncomingMessage> upgrade(): node.events.EventType<Server<Request, *>, js.array.JsTuple3<Request, node.stream.Duplex, node.buffer.Buffer>>
    }
}
