// Automatically generated - do not modify!

package web.mediastreams

import js.core.Void
import js.promise.Promise
import seskar.js.JsAsync
import web.events.*
import kotlin.js.JsName
import kotlin.js.definedExternally

/**
 * The **`MediaStreamTrack`** interface of the Media Capture and Streams API represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack)
 */
open external class MediaStreamTrack
private constructor() :
    EventTarget {
    /**
     * The **`contentHint`** property of the MediaStreamTrack interface is a string that hints at the type of content the track contains.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/contentHint)
     */
    var contentHint: String

    /**
     * The **`enabled`** property of the `true` if the track is allowed to render the source stream or `false` if it is not.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/enabled)
     */
    var enabled: Boolean

    /**
     * The **`id`** read-only property of the MediaStreamTrack interface returns a string containing a unique identifier (GUID) for the track, which is generated by the user agent.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/id)
     */
    val id: String

    /**
     * The **`kind`** read-only property of the MediaStreamTrack interface returns a string set to `'audio'` if the track is an audio track and to `'video'` if it is a video track.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/kind)
     */
    val kind: String

    /**
     * The **`label`** read-only property of the MediaStreamTrack interface returns a string containing a user agent-assigned label that identifies the track source, as in `'internal microphone'`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/label)
     */
    val label: String

    /**
     * The **`muted`** read-only property of the indicating whether or not the track is currently unable to provide media output.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/muted)
     */
    val muted: Boolean

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event)
     */
    var onended: EventHandler<Event, MediaStreamTrack, MediaStreamTrack>?

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event)
     */
    var onmute: EventHandler<Event, MediaStreamTrack, MediaStreamTrack>?

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event)
     */
    var onunmute: EventHandler<Event, MediaStreamTrack, MediaStreamTrack>?

    /**
     * The **`readyState`** read-only property of the MediaStreamTrack interface returns an enumerated value giving the status of the track.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/readyState)
     */
    val readyState: MediaStreamTrackState

    /**
     * The **`applyConstraints()`** method of the MediaStreamTrack interface applies a set of constraints to the track; these constraints let the website or app establish ideal values and acceptable ranges of values for the constrainable properties of the track, such as frame rate, dimensions, echo cancellation, and so forth.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/applyConstraints)
     */
    @JsAsync
    @Suppress("WRONG_EXTERNAL_DECLARATION")
    suspend fun applyConstraints(constraints: MediaTrackConstraints = definedExternally)

    @JsName("applyConstraints")
    fun applyConstraintsAsync(constraints: MediaTrackConstraints = definedExternally): Promise<Void>

    /**
     * The **`clone()`** method of the MediaStreamTrack interface creates a duplicate of the `MediaStreamTrack`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/clone)
     */
    fun clone(): MediaStreamTrack

    /**
     * The **`getCapabilities()`** method of the MediaStreamTrack interface returns an object detailing the accepted values or value range for each constrainable property of the associated `MediaStreamTrack`, based upon the platform and user agent.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getCapabilities)
     */
    fun getCapabilities(): MediaTrackCapabilities

    /**
     * The **`getConstraints()`** method of the MediaStreamTrack interface returns a recently established for the track using a prior call to constraints indicate values and ranges of values that the website or application has specified are required or acceptable for the included constrainable properties.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getConstraints)
     */
    fun getConstraints(): MediaTrackConstraints

    /**
     * The **`getSettings()`** method of the object containing the current values of each of the constrainable properties for the current `MediaStreamTrack`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getSettings)
     */
    fun getSettings(): MediaTrackSettings

    /**
     * The **`stop()`** method of the MediaStreamTrack interface stops the track.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/stop)
     */
    fun stop()

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event)
     */
    @JsEvent("ended")
    val endedEvent: EventInstance<Event, MediaStreamTrack /* this */, MediaStreamTrack /* this */>

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event)
     */
    @JsEvent("mute")
    val muteEvent: EventInstance<Event, MediaStreamTrack /* this */, MediaStreamTrack /* this */>

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event)
     */
    @JsEvent("unmute")
    val unmuteEvent: EventInstance<Event, MediaStreamTrack /* this */, MediaStreamTrack /* this */>
}
