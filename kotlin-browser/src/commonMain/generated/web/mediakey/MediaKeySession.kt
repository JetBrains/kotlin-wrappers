// Automatically generated - do not modify!

package web.mediakey

import js.buffer.BufferSource
import js.core.JsBoolean
import js.core.Void
import js.promise.Promise
import seskar.js.JsAsync
import web.events.*
import web.time.EpochTimeStamp
import kotlin.js.JsName

/**
 * The **`MediaKeySession`** interface of the Encrypted Media Extensions API represents a context for message exchange with a content decryption module (CDM).
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession)
 */
external class MediaKeySession
private constructor() :
    EventTarget {
    /**
     * The **`closed`** read-only property of the MediaKeySession interface returns a Promise signaling when a MediaKeySession closes.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/closed)
     */
    val closed: Promise<MediaKeySessionClosedReason>

    /**
     * The **`expiration`** read-only property of the MediaKeySession interface returns the time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/expiration)
     */
    val expiration: EpochTimeStamp

    /**
     * The **`keyStatuses`** read-only property of the MediaKeySession interface returns a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keyStatuses)
     */
    val keyStatuses: MediaKeyStatusMap

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event)
     */
    var onkeystatuseschange: EventHandler<Event, MediaKeySession, MediaKeySession>?

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event)
     */
    var onmessage: EventHandler<MediaKeyMessageEvent, MediaKeySession, MediaKeySession>?

    /**
     * The **`sessionId`** read-only property of the MediaKeySession interface contains a unique string generated by the content decryption module (CDM) for the current media object and its associated keys or licenses.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/sessionId)
     */
    val sessionId: String

    /**
     * The `close()` method of the MediaKeySession interface notifies that the current media session is no longer needed, and that the content decryption module should release any resources associated with this object and close it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/close)
     */
    @JsAsync
    @Suppress("WRONG_EXTERNAL_DECLARATION")
    suspend fun close()

    @JsName("close")
    fun closeAsync(): Promise<Void>

    /**
     * The `generateRequest()` method of the MediaKeySession interface returns a Promise after generating a license request based on initialization data.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/generateRequest)
     */
    @JsAsync
    @Suppress("WRONG_EXTERNAL_DECLARATION")
    suspend fun generateRequest(
        initDataType: String,
        initData: BufferSource,
    )

    @JsName("generateRequest")
    fun generateRequestAsync(
        initDataType: String,
        initData: BufferSource,
    ): Promise<Void>

    /**
     * The `load()` method of the MediaKeySession interface returns a Promise that resolves to a boolean value after loading data for a specified session object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/load)
     */
    @JsAsync
    @Suppress("WRONG_EXTERNAL_DECLARATION")
    suspend fun load(sessionId: String): Boolean

    @JsName("load")
    fun loadAsync(sessionId: String): Promise<JsBoolean>

    /**
     * The `remove()` method of the MediaKeySession interface returns a Promise after removing any session data associated with the current object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/remove)
     */
    @JsAsync
    @Suppress("WRONG_EXTERNAL_DECLARATION")
    suspend fun remove()

    @JsName("remove")
    fun removeAsync(): Promise<Void>

    /**
     * The `update()` method of the MediaKeySession interface loads messages and licenses to the CDM, and then returns a Promise.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/update)
     */
    @JsAsync
    @Suppress("WRONG_EXTERNAL_DECLARATION")
    suspend fun update(response: BufferSource)

    @JsName("update")
    fun updateAsync(response: BufferSource): Promise<Void>

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event)
     */
    @JsEvent("keystatuseschange")
    val keyStatusesChangeEvent: EventInstance<Event, MediaKeySession /* this */, MediaKeySession /* this */>

    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event)
     */
    @JsEvent("message")
    val messageEvent: EventInstance<MediaKeyMessageEvent, MediaKeySession /* this */, MediaKeySession /* this */>
}
