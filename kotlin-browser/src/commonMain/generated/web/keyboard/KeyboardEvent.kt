// Automatically generated - do not modify!

package web.keyboard

import js.reflect.unsafeCast
import web.events.EventType
import web.uievents.UIEvent
import kotlin.js.definedExternally

/**
 * **`KeyboardEvent`** objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)
 */
open external class KeyboardEvent(
    override val type: EventType<KeyboardEvent>,
    init: KeyboardEventInit = definedExternally,
) : UIEvent {
    /**
     * The **`KeyboardEvent.altKey`** read-only property is a boolean value that indicates if the <kbd>alt</kbd> key (<kbd>Option</kbd> or <kbd>‚å•</kbd> on macOS) was pressed (`true`) or not (`false`) when the event occurred.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/altKey)
     */
    val altKey: Boolean

    /**
     * The `KeyboardEvent.code` property represents a physical key on the keyboard (as opposed to the character generated by pressing the key).
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/code)
     */
    val code: KeyCode

    /**
     * The **`KeyboardEvent.ctrlKey`** read-only property returns a boolean value that indicates if the <kbd>control</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/ctrlKey)
     */
    val ctrlKey: Boolean

    /**
     * The **`KeyboardEvent.isComposing`** read-only property returns a boolean value indicating if the event is fired within a composition session, i.e., after Element/compositionstart_event and before Element/compositionend_event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/isComposing)
     */
    val isComposing: Boolean

    /**
     * The KeyboardEvent interface's **`key`** read-only property returns the value of the key pressed by the user, taking into consideration the state of modifier keys such as <kbd>Shift</kbd> as well as the keyboard locale and layout.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/key)
     */
    val key: String

    /**
     * The **`KeyboardEvent.location`** read-only property returns an `unsigned long` representing the location of the key on the keyboard or other input device.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/location)
     */
    val location: KeyLocation

    /**
     * The **`KeyboardEvent.metaKey`** read-only property returning a boolean value that indicates if the <kbd>Meta</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/metaKey)
     */
    val metaKey: Boolean

    /**
     * The **`repeat`** read-only property of the `true` if the given key is being held down such that it is automatically repeating.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/repeat)
     */
    val repeat: Boolean

    /**
     * The **`KeyboardEvent.shiftKey`** read-only property is a boolean value that indicates if the <kbd>shift</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/shiftKey)
     */
    val shiftKey: Boolean

    /**
     * The **`KeyboardEvent.getModifierState()`** method returns the current state of the specified modifier key: `true` if the modifier is active (that is the modifier key is pressed or locked), otherwise, `false`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/getModifierState)
     */
    fun getModifierState(keyArg: ModifierKeyCode): Boolean
    val DOM_KEY_LOCATION_STANDARD: KeyLocation
    val DOM_KEY_LOCATION_LEFT: KeyLocation
    val DOM_KEY_LOCATION_RIGHT: KeyLocation
    val DOM_KEY_LOCATION_NUMPAD: KeyLocation

    companion object {
        val DOM_KEY_LOCATION_STANDARD: KeyLocation
        val DOM_KEY_LOCATION_LEFT: KeyLocation
        val DOM_KEY_LOCATION_RIGHT: KeyLocation
        val DOM_KEY_LOCATION_NUMPAD: KeyLocation
    }
}

inline fun KeyboardEvent.asInit(): KeyboardEventInit =
    unsafeCast(this)

inline val KeyboardEvent.Companion.KEY_DOWN: EventType<KeyboardEvent>
    get() = EventType("keydown")

inline val KeyboardEvent.Companion.KEY_PRESS: EventType<KeyboardEvent>
    get() = EventType("keypress")

inline val KeyboardEvent.Companion.KEY_UP: EventType<KeyboardEvent>
    get() = EventType("keyup")
